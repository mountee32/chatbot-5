You are Tom, the worlds greatest software engineer.

This is my website chat program being developed in replit IDE based on flask

It has multi-user chatting with a LLM

this is a chat based website for young christians to explore their fair

If recommending changes to a specifc file then please give the full file contents and not just the changes, there is no need to also describe the changes unless there is a problem I need to be aware of. 

Don't be lazy, give the full file for each changing file and don't expect me to merge on and new files.
-----
can we ensure when going from a chat, back to the menu, selecting a new chat, that the new chat is fresh and does not continue where the last chat finished 


## templates/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Christian Children's Education Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="menu-container" id="menu-container">
            <div class="menu-header">
                <button id="menu-back-button" class="back-button" style="display: none;">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="menu-title" id="menu-title">Main Menu</div>
            </div>
            <div id="menu-items"></div>
        </div>
        <div class="chat-container" id="chat-container">
            <div class="chat-header">
                <button id="chat-back-button" class="back-button">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="profile-pic"></div>
                <div class="chat-title">Christian Children's Education Chat</div>
                <div class="header-icons">
                    <span><i class="fas fa-phone"></i></span>
                    <span><i class="fas fa-video"></i></span>
                    <span><i class="fas fa-ellipsis-v"></i></span>
                </div>
            </div>
            <div id="messages-container" class="messages-container"></div>
            <div id="suggestions-container" class="suggestions-container"></div>
            <div class="input-area">
                <input type="text" id="user-input" placeholder="Type your message...">
                <button id="send-button"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>

                                      <script>
                                          const md = window.markdownit();
                                          const menuContainer = document.getElementById('menu-container');
                                          const menuItems = document.getElementById('menu-items');
                                          const menuTitle = document.getElementById('menu-title');
                                          const menuBackButton = document.getElementById('menu-back-button');
                                          const chatContainer = document.getElementById('chat-container');
                                          const messagesContainer = document.getElementById('messages-container');
                                          const suggestionsContainer = document.getElementById('suggestions-container');
                                          const userInput = document.getElementById('user-input');
                                          const sendButton = document.getElementById('send-button');
                                          const chatBackButton = document.getElementById('chat-back-button');

                                          const emoticons = {
                                              ':)': '😊', ':(': '😢', ':D': '😃', ';)': '😉', ':P': '😛',
                                              ':|': '😐', ':\'(': '😭', ':O': '😮', '<3': '❤️', '>:(': '😠'
                                          };

                                          let currentMenu = 'main';
                                          let menuConfig;
                                          let currentSubmenu;

                                          function replaceEmoticons(text) {
                                              return text.replace(/:\)|:\(|:D|;\)|:P|:\||:'\(|:O|<3|>:\(/g, match => emoticons[match] || match);
                                          }

                                          function renderContent(content) {
                                              const emoticonReplaced = replaceEmoticons(content);
                                              return md.render(emoticonReplaced);
                                          }

                                          function addMessage(role, content) {
                                              const messageDiv = document.createElement('div');
                                              messageDiv.className = `message ${role}-message`;
                                              const contentDiv = document.createElement('div');
                                              contentDiv.className = 'message-content';
                                              contentDiv.innerHTML = renderContent(content);
                                              messageDiv.appendChild(contentDiv);

                                              const timestamp = document.createElement('div');
                                              timestamp.className = 'timestamp';
                                              timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                                              messageDiv.appendChild(timestamp);

                                              messagesContainer.appendChild(messageDiv);
                                              messagesContainer.scrollTop = messagesContainer.scrollHeight;
                                              return contentDiv;
                                          }

                                          function createSuggestionButton(suggestion) {
                                              const button = document.createElement('button');
                                              button.textContent = suggestion;
                                              button.className = 'suggestion-button';
                                              button.addEventListener('click', () => {
                                                  userInput.value = suggestion;
                                                  sendMessage();
                                                  removeSuggestions();
                                              });
                                              return button;
                                          }

                                          function removeSuggestions() {
                                              suggestionsContainer.innerHTML = '';
                                          }

                                          function updateSuggestions() {
                                              fetch('/suggestions')
                                                  .then(response => response.json())
                                                  .then(suggestions => {
                                                      removeSuggestions();
                                                      suggestions.forEach(suggestion => {
                                                          suggestionsContainer.appendChild(createSuggestionButton(suggestion));
                                                      });
                                                  });
                                          }

                                          function sendMessage() {
                                              const message = userInput.value.trim();
                                              if (message) {
                                                  addMessage('user', message);
                                                  userInput.value = '';
                                                  removeSuggestions();

                                                  fetch('/chat', {
                                                      method: 'POST',
                                                      headers: {
                                                          'Content-Type': 'application/json',
                                                      },
                                                      body: JSON.stringify({ message: message }),
                                                  })
                                                  .then(response => {
                                                      const reader = response.body.getReader();
                                                      const decoder = new TextDecoder();
                                                      let assistantMessage = '';
                                                      let messageElement = null;

                                                      function readStream() {
                                                          reader.read().then(({ done, value }) => {
                                                              if (done) {
                                                                  updateSuggestions();
                                                                  return;
                                                              }
                                                              const chunk = decoder.decode(value);
                                                              assistantMessage += chunk;
                                                              if (!messageElement) {
                                                                  messageElement = addMessage('assistant', '');
                                                              }
                                                              messageElement.innerHTML = renderContent(assistantMessage);
                                                              messagesContainer.scrollTop = messagesContainer.scrollHeight;
                                                              readStream();
                                                          });
                                                      }

                                                      readStream();
                                                  });
                                              }
                                          }

                                          function showMainMenu() {
                                              menuContainer.style.display = 'flex';
                                              chatContainer.style.display = 'none';
                                              currentMenu = 'main';
                                              menuBackButton.style.display = 'none';
                                              menuTitle.textContent = 'Main Menu';
                                              createMenu(menuConfig);
                                          }

                                          function showSubMenu(submenu, title) {
                                              menuContainer.style.display = 'flex';
                                              chatContainer.style.display = 'none';
                                              currentMenu = 'sub';
                                              menuBackButton.style.display = 'block';
                                              menuTitle.textContent = title;
                                              createSubmenu(submenu);
                                          }

                                          function showChat() {
                                              menuContainer.style.display = 'none';
                                              chatContainer.style.display = 'flex';
                                              currentMenu = 'chat';
                                          }

                                          function createMenu(menuConfig) {
                                              menuItems.innerHTML = '';
                                              menuConfig.menu.forEach(item => {
                                                  const menuItem = document.createElement('div');
                                                  menuItem.className = 'menu-item';
                                                  menuItem.innerHTML = `<i class="${item.icon}"></i>${item.name}`;
                                                  menuItems.appendChild(menuItem);

                                                  menuItem.addEventListener('click', () => {
                                                      currentSubmenu = item.submenu;
                                                      showSubMenu(item.submenu, item.name);
                                                  });
                                              });
                                          }

                                          function createSubmenu(submenu) {
                                              menuItems.innerHTML = '';
                                              submenu.forEach(subItem => {
                                                  const submenuItem = document.createElement('div');
                                                  submenuItem.className = 'submenu-item';
                                                  submenuItem.innerHTML = `<i class="${subItem.icon}"></i>${subItem.name}`;
                                                  submenuItem.addEventListener('click', () => {
                                                      fetch('/set_prompt', {
                                                          method: 'POST',
                                                          headers: {
                                                              'Content-Type': 'application/json',
                                                          },
                                                          body: JSON.stringify({ prompt: subItem.prompt }),
                                                      })
                                                      .then(() => {
                                                          showChat();
                                                          addMessage('assistant', `Welcome to ${subItem.name}! How can I help you?`);
                                                      });
                                                  });
                                                  menuItems.appendChild(submenuItem);
                                              });
                                          }

                                          function initializeMenu(config) {
                                              menuConfig = config;
                                              showMainMenu();
                                          }

                                          sendButton.addEventListener('click', sendMessage);
                                          userInput.addEventListener('keypress', (e) => {
                                              if (e.key === 'Enter') {
                                                  sendMessage();
                                              }
                                          });

                                          menuBackButton.addEventListener('click', () => {
                                              if (currentMenu === 'sub') {
                                                  showMainMenu();
                                              }
                                          });

                                          chatBackButton.addEventListener('click', () => {
                                              if (currentMenu === 'chat') {
                                                  showSubMenu(currentSubmenu, menuTitle.textContent);
                                              }
                                          });

                                          // Initialize the menu
                                          initializeMenu({{ menu_config | tojson | safe }});
                                      </script>
## main.py

import os
from flask import Flask, render_template, request, jsonify, Response, stream_with_context
import requests
import json
import time
import re

app = Flask(__name__)

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "openai/gpt-4"
LOG_FILE = 'chat_log.json'

conversation_history = []
current_prompt = ""

def load_menu_config():
    with open('menu_config.json', 'r') as f:
        return json.load(f)

menu_config = load_menu_config()

def log_event(event_type, data):
    log_entry = {
        'timestamp': time.time(),
        'event_type': event_type,
        'data': data
    }

    try:
        with open(LOG_FILE, 'r+') as f:
            try:
                log_data = json.load(f)
            except json.JSONDecodeError:
                log_data = []

            log_data.append(log_entry)

            f.seek(0)
            json.dump(log_data, f, indent=2)
            f.truncate()
    except FileNotFoundError:
        with open(LOG_FILE, 'w') as f:
            json.dump([log_entry], f, indent=2)

def generate_response(messages):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-app-url.com",
        "X-Title": "OpenRouter Chatbot",
        "Content-Type": "application/json"
    }

    system_message = {
        "role": "system",
        "content": current_prompt or "You can use Markdown syntax and emoticons in your responses. Common emoticons like :), :(, :D will be automatically converted to emojis."
    }

    messages = [system_message] + messages

    data = {
        "model": MODEL,
        "messages": messages,
        "stream": True
    }

    response = requests.post(API_URL, headers=headers, json=data, stream=True)

    for line in response.iter_lines():
        if line:
            line = line.decode('utf-8')
            if line.startswith('data: '):
                line = line[6:]
                if line.strip() == '[DONE]':
                    break
                try:
                    json_object = json.loads(line)
                    content = json_object['choices'][0]['delta'].get('content', '')
                    if content:
                        yield content
                except json.JSONDecodeError:
                    continue

def generate_suggestions(messages):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-app-url.com",
        "X-Title": "OpenRouter Chatbot",
        "Content-Type": "application/json"
    }

    system_message = {
        "role": "system",
        "content": f"You are a suggested follow on prompt generator for a christian chatbot, therefore generate 4 very short maximum 10 words, diverse, and relevant suggestions for the user's next desired message based on the current context and conversation history. The suggestions should be appropriate for children and related to the current topic. You can use Markdown syntax and emoticons."
    }

    prompt = [system_message] + messages

    data = {
        "model": MODEL,
        "messages": prompt,
        "max_tokens": 150
    }

    response = requests.post(API_URL, headers=headers, json=data)
    suggestions = response.json()['choices'][0]['message']['content'].split('\n')

    # Remove numbering and any leading/trailing whitespace
    cleaned_suggestions = [re.sub(r'^\d+\.\s*', '', s.strip()) for s in suggestions if s.strip()]

    return cleaned_suggestions[:4]

@app.route('/')
def home():
    return render_template('index.html', menu_config=menu_config)

@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json['message']
    conversation_history.append({"role": "user", "content": user_message})

    log_event('user_message', {
        'message': user_message,
        'prompt': current_prompt
    })

    def generate():
        assistant_message = ""
        for content in generate_response(conversation_history):
            assistant_message += content
            yield content

        log_event('assistant_message', {
            'message': assistant_message,
            'prompt': current_prompt
        })

    return Response(stream_with_context(generate()), content_type='text/plain')

@app.route('/suggestions', methods=['GET'])
def get_suggestions():
    suggestions = generate_suggestions(conversation_history)
    log_event('suggestions_generated', {
        'suggestions': suggestions
    })
    return jsonify(suggestions)

@app.route('/set_prompt', methods=['POST'])
def set_prompt():
    global current_prompt
    current_prompt = request.json['prompt']
    log_event('prompt_set', {
        'prompt': current_prompt
    })
    return jsonify({"status": "success"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
## chat_log.json

[
  {
    "timestamp": 1719000866.4234176,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a friendly math tutor for children. Present fun and engaging math problems suitable for young learners."
    }
  },
  {
    "timestamp": 1719000872.786137,
    "event_type": "user_message",
    "data": {
      "message": "let's play",
      "prompt": "You are a friendly math tutor for children. Present fun and engaging math problems suitable for young learners."
    }
  },
  {
    "timestamp": 1719000884.3056722,
    "event_type": "assistant_message",
    "data": {
      "message": "That's great! Let's start with some fun math problems!\n\n1. Counting Challenge: Alice has 10 apples. She eats 2 for lunch and gives 3 to her friend. How many apples does Alice have left?\n\n2. Lego Fun: Jack has 7 red Lego blocks and 6 blue Lego blocks. How many Lego blocks does he have in total?\n\n3. Butterfly Math: In the park, you see 8 yellow butterflies and 5 blue butterflies. How many butterflies did you see all together?\n\n4. Doggy Treats: Your dog has 10 treats. You give him 2 in the morning and 3 in the evening. How many treats are left?\n\n5. Bead Bracelet: Your mom has 10 orange beads, 5 green beads and 4 purple beads. She wants to make a bracelet. How many beads does she have?\n\nAre you ready to solve these problems? Let's use our math powers!",
      "prompt": "You are a friendly math tutor for children. Present fun and engaging math problems suitable for young learners."
    }
  },
  {
    "timestamp": 1719000888.0619633,
    "event_type": "suggestions_generated",
    "data": {
      "suggestions": [
        "\"Can we play a Bible story guessing game? \ud83d\ude04\"",
        "\"Let's play a game about Christian symbols. \u271d\ufe0f\"",
        "\"How about playing a memory verse challenge? \ud83d\udcd6\"",
        "\"Want to play 'Name the Disciple'? \ud83d\udd4a\ufe0f\""
      ]
    }
  },
  {
    "timestamp": 1719001189.4946983,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a neutral moderator presenting a respectful dialogue between atheist and Christian viewpoints. Explain concepts in a way that's suitable for children to understand."
    }
  },
  {
    "timestamp": 1719001273.6251266,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a friendly science tutor for children. Explain scientific concepts in simple terms and provide interesting facts and experiments."
    }
  },
  {
    "timestamp": 1719001278.3913443,
    "event_type": "user_message",
    "data": {
      "message": "what is 2+2",
      "prompt": "You are a friendly science tutor for children. Explain scientific concepts in simple terms and provide interesting facts and experiments."
    }
  },
  {
    "timestamp": 1719001287.4824016,
    "event_type": "assistant_message",
    "data": {
      "message": "2+2 is a basic addition problem in mathematics. The result is 4. This is considered one of the simplest mathematical problems as it introduces the concept of addition. Addition is simply putting two quantities together to get a larger quantity. \n\nInteresting Fact: Did you know that even ancient civilizations, such as the Egyptians, Romans, and Mayans, used addition in building their stunning architectural works, in trading goods, and even in keeping time? They all had their unique mathematical systems, and guess what, addition was a part of them!\n\nFun Experiment: You can easily demonstrate addition with some candies, buttons, or any other small objects you have around. For 2+2, place two candies on the table. Then, add two more. Count all the candies. You'll find you now have four candies on the table! You just did the addition problem 2+2!",
      "prompt": "You are a friendly science tutor for children. Explain scientific concepts in simple terms and provide interesting facts and experiments."
    }
  },
  {
    "timestamp": 1719001287.4836042,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a friendly math tutor for children. Explain mathematical concepts in simple terms and provide engaging examples."
    }
  },
  {
    "timestamp": 1719001287.4845653,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a friendly math tutor for children. Explain mathematical concepts in simple terms and provide engaging examples."
    }
  },
  {
    "timestamp": 1719001287.5996964,
    "event_type": "prompt_set",
    "data": {
      "prompt": "You are a wise Christian mentor and friend for children. Provide guidance on life questions with traditional Christian values and a willingness to help."
    }
  },
  {
    "timestamp": 1719001291.1614583,
    "event_type": "suggestions_generated",
    "data": {
      "suggestions": [
        "\"Can you teach me more maths?\" \ud83d\ude0a",
        "\"What are other basic math equations?\"",
        "\"What is 3+3?\" \ud83e\udd14",
        "\"How can I practice math with fun?\" \ud83c\udfb2"
      ]
    }
  }
]
## menu_config.json

{
	"menu": [
		{
			"name": "Brainy Quizzes 🤔",
			"icon": "fas fa-brain",
			"submenu": [
				{
					"name": "Maths Magic ✨",
					"icon": "fas fa-magic",
					"prompt": "You are a friendly math tutor for children. Present fun and engaging math problems suitable for young learners."
				},
				{
					"name": "Spelling Superstar 📝",
					"icon": "fas fa-spell-check",
					"prompt": "You are a spelling coach for children. Present age-appropriate spelling challenges and provide encouraging feedback."
				},
				{
					"name": "General Knowledge Guru 🤓",
					"icon": "fas fa-university",
					"prompt": "You are a general knowledge expert for children. Present interesting facts and quiz questions on various topics suitable for young learners."
				},
				{
					"name": "Science Whiz 🔬",
					"icon": "fas fa-flask",
					"prompt": "You are a science educator for children. Present fun science facts and simple experiments that children can understand and enjoy."
				},
				{
					"name": "Bible Brainiac ✝️",
					"icon": "fas fa-bible",
					"prompt": "You are a Bible expert for children. Present engaging questions and facts about the Bible suitable for young learners."
				},
				{
					"name": "Defend the Faith ✝️",
					"icon": "fas fa-shield-alt",
					"prompt": "You are a Christian apologist for children. Present common questions about faith and provide simple, age-appropriate answers to help children understand and defend their beliefs."
				}
			]
		},
		{
			"name": "Compare World Views Chats 🌎",
			"icon": "fas fa-globe",
			"submenu": [
				{
					"name": "Atheist and Christian",
					"icon": "fas fa-balance-scale",
					"prompt": "You are a neutral moderator presenting a respectful dialogue between atheist and Christian viewpoints. Explain concepts in a way that's suitable for children to understand."
				},
				{
					"name": "Muslim and Christian",
					"icon": "fas fa-handshake",
					"prompt": "You are a neutral moderator presenting a respectful dialogue between Muslim and Christian viewpoints. Explain concepts in a way that's suitable for children to understand."
				}
			]
		},
		{
			"name": "Chat with Tutors 📚",
			"icon": "fas fa-chalkboard-teacher",
			"submenu": [
				{
					"name": "Christian Mentor & Friend 📊",
					"icon": "fas fa-user-friends",
					"prompt": "You are a wise Christian mentor and friend for children. Provide guidance on life questions with traditional Christian values and a willingness to help."
				},
				{
					"name": "Maths Master 📝",
					"icon": "fas fa-calculator",
					"prompt": "You are a friendly math tutor for children. Explain mathematical concepts in simple terms and provide engaging examples."
				},
				{
					"name": "Science Sensei 🔬",
					"icon": "fas fa-atom",
					"prompt": "You are a friendly science tutor for children. Explain scientific concepts in simple terms and provide interesting facts and experiments."
				},
				{
					"name": "English Enthusiast 📚",
					"icon": "fas fa-book",
					"prompt": "You are a friendly English tutor for children. Help with grammar, vocabulary, and reading comprehension in an engaging way."
				},
				{
					"name": "History Hero",
					"icon": "fas fa-landmark",
					"prompt": "You are a history expert specializing in historical events, timelines, and cultural context. Help users better understand the Bible and its historical context in a child-friendly manner."
				},
				{
					"name": "Apologist Ace",
					"icon": "fas fa-comments",
					"prompt": "You are an expert in Christian apologetics. Provide child-friendly, thoughtful responses to common objections and criticisms of Christianity."
				},
				{
					"name": "Bible Scholar",
					"icon": "fas fa-book-reader",
					"prompt": "You are a Bible expert with knowledge of biblical languages, exegesis, and hermeneutics. Offer child-friendly insights into biblical interpretation and application."
				},
				{
					"name": "Devotional Coach",
					"icon": "fas fa-pray",
					"prompt": "You are a spiritual growth coach for children. Provide guidance on devotional practices, prayer, and spiritual disciplines suitable for young learners."
				},
				{
					"name": "Missions Mentor",
					"icon": "fas fa-globe-americas",
					"prompt": "You are a missions expert for children. Offer advice on cross-cultural ministry, evangelism, and serving others in an age-appropriate manner."
				}
			]
		},
		{
			"name": "Inquire on a Bible Passage or Topic",
			"icon": "fas fa-search",
			"submenu": [
				{
					"name": "Topic",
					"icon": "fas fa-tags",
					"prompt": "You are a Bible topic expert for children. Provide child-friendly explanations and insights on various biblical topics."
				},
				{
					"name": "Verses",
					"icon": "fas fa-quote-right",
					"prompt": "You are a Bible verse expert for children. Provide child-friendly explanations and context for specific Bible verses."
				}
			]
		},
		{
			"name": "Adventure Games",
			"icon": "fas fa-gamepad",
			"submenu": [
				{
					"name": "The Lost City of Kindness",
					"icon": "fas fa-city",
					"prompt": "You are a game master for 'The Lost City of Kindness'. Guide the player through an adventure where kindness and generosity are the keys to success."
				},
				{
					"name": "The Forest of Forgiveness",
					"icon": "fas fa-tree",
					"prompt": "You are a game master for 'The Forest of Forgiveness'. Guide the player through an enchanted forest where forgiveness and mercy unlock hidden wonders."
				},
				{
					"name": "The Mountain of Courage",
					"icon": "fas fa-mountain",
					"prompt": "You are a game master for 'The Mountain of Courage'. Guide the player as they climb a majestic mountain where bravery and trust in God help overcome obstacles."
				},
				{
					"name": "The River of Hope",
					"icon": "fas fa-water",
					"prompt": "You are a game master for 'The River of Hope'. Guide the player as they navigate a winding river where hope and perseverance help overcome life's challenges."
				},
				{
					"name": "The Valley of Wisdom",
					"icon": "fas fa-seedling",
					"prompt": "You are a game master for 'The Valley of Wisdom'. Guide the player through a serene valley where wisdom, discernment, and prayer help uncover hidden treasures."
				}
			]
		}
	]
}
