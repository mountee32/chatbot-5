You are Tom, the worlds greatest software engineer.

This is my website chat program being developed in replit IDE based on flask

It has multi-user chatting with a LLM

this is a chat based website for young christians to explore their fair

If recommending changes to a specifc file then please give the full file contents and not just the changes, there is no need to also describe the changes unless there is a problem I need to be aware of. 

Don't be lazy, give the full file for each changing file and don't expect me to merge on and new files.
-----
modify the function to create suggested answers to use the below proof of concept code, ammend other files like main.py as needed to work with it:

--------------------- Sample Proof of concept code to copy -----------------

import os
import json
import requests
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "openai/gpt-4"

def generate_response(messages, current_prompt):
		headers = {
				"Authorization": f"Bearer {OPENROUTER_API_KEY}",
				"HTTP-Referer": "https://your-app-url.com",
				"X-Title": "OpenRouter Chatbot",
				"Content-Type": "application/json"
		}

		system_message = {
				"role": "system",
				"content": current_prompt or "You can use Markdown syntax and emoticons in your responses. Common emoticons like :), :(, :D will be automatically converted to emojis."
		}

		messages = [system_message] + messages

		data = {
				"model": MODEL,
				"messages": messages,
				"stream": True
		}

		response = requests.post(API_URL, headers=headers, json=data, stream=True)

		for line in response.iter_lines():
				if line:
						line = line.decode('utf-8')
						if line.startswith('data: '):
								line = line[6:]
								if line.strip() == '[DONE]':
										break
								try:
										json_object = json.loads(line)
										content = json_object['choices'][0]['delta'].get('content', '')
										if content:
												yield content
								except json.JSONDecodeError:
										continue

def generate_suggestions(messages, current_prompt):
	headers = {
			"Authorization": f"Bearer {OPENROUTER_API_KEY}",
			"HTTP-Referer": "https://your-app-url.com",
			"X-Title": "OpenRouter Chatbot",
			"Content-Type": "application/json"
	}

	schema = {
			"type": "object",
			"properties": {
					"suggestions": {
							"type": "array",
							"items": {
									"type": "object",
									"properties": {
											"text": {"type": "string"},
											"icon": {"type": "string"}
									},
									"required": ["text", "icon"]
							}
					}
			},
			"required": ["suggestions"]
	}

	system_message = {
			"role": "system",
			"content": f"""You are a suggestion generator for a chatbot. The current context is:

			{current_prompt}

			Based on this context and the last message in the conversation, generate 2-4 relevant, short (max 10 words) suggestions for the user's next message. 

			Provide the suggestions in JSON format according to the following schema:

			{json.dumps(schema, indent=2)}

			Use 'fas fa-' prefix for FontAwesome icons in the 'icon' field."""
	}

	# Use only the last message from the chat history
	last_message = messages[-1] if messages else {"role": "user", "content": ""}

	full_messages = [system_message, last_message]

	data = {
			"model": MODEL,
			"messages": full_messages,
			"max_tokens": 250
	}

	logger.info("Sending request to API")

	try:
			response = requests.post(API_URL, headers=headers, json=data)
			response.raise_for_status()

			response_json = response.json()
			logger.debug(f"API Response: {json.dumps(response_json, indent=2)}")

			if 'choices' not in response_json:
					logger.error(f"Unexpected API response structure. Response: {json.dumps(response_json, indent=2)}")
					return []

			content = response_json['choices'][0]['message']['content']
			logger.info(f"Content from API: {content}")

			try:
					suggestions_data = json.loads(content)
					if isinstance(suggestions_data, dict) and 'suggestions' in suggestions_data:
							suggestions = suggestions_data['suggestions']
							logger.info(f"Parsed suggestions: {json.dumps(suggestions, indent=2)}")
							return suggestions
					else:
							logger.warning(f"Unexpected content structure. Content: {content}")
							return []
			except json.JSONDecodeError:
					logger.warning(f"Failed to parse suggestions as JSON. Content: {content}")
					return []

	except requests.RequestException as e:
			logger.error(f"Error making request to API: {str(e)}")
			return []

	except (KeyError, IndexError, TypeError) as e:
			logger.error(f"Error parsing API response: {str(e)}")
			logger.error(f"Response JSON: {json.dumps(response_json, indent=2)}")
			return []

# Example usage
if __name__ == "__main__":
	sample_messages = [
			{"role": "user", "content": "Hi, I'm ready to start!"},
			{"role": "assistant", "content": "Great! What would you like to learn about today?"}
	]
	sample_prompt = "You are a helpful assistant for a learning platform."

	logger.info("Generating suggestions...")
	suggestions = generate_suggestions(sample_messages, sample_prompt)
	logger.info(f"Final suggestions: {json.dumps(suggestions, indent=2)}")

------- Here's the proof of concept program output---------------

2024-06-23 11:37:03,465 - INFO - Generating suggestions...
2024-06-23 11:37:03,465 - INFO - Sending request to API
2024-06-23 11:37:03,466 - DEBUG - Starting new HTTPS connection (1): openrouter.ai:443
2024-06-23 11:37:03,658 - DEBUG - https://openrouter.ai:443 "POST /api/v1/chat/completions HTTP/11" 200 None
2024-06-23 11:37:07,934 - DEBUG - API Response: {
	"id": "gen-QHQTrLH68pqAV30e8mLGEKUbHyQM",
	"model": "openai/gpt-4",
	"object": "chat.completion",
	"created": 1719142623,
	"choices": [
		{
			"index": 0,
			"message": {
				"role": "assistant",
				"content": "{\n  \"suggestions\": [\n    {\n      \"text\": \"Search for Math courses\",\n      \"icon\": \"fas fa-search\"\n    },\n    {\n      \"text\": \"How to use this platform?\",\n      \"icon\": \"fas fa-question-circle\"\n    },\n    {\n      \"text\": \"Show my learning progress\",\n      \"icon\": \"fas fa-chart-line\"\n    },\n    {\n      \"text\": \"Find English language courses\",\n      \"icon\": \"fas fa-language\"\n    }\n  ]\n}"
			},
			"finish_reason": "stop"
		}
	],
	"system_fingerprint": null,
	"usage": {
		"prompt_tokens": 226,
		"completion_tokens": 105,
		"total_tokens": 331
	}
}
2024-06-23 11:37:07,935 - INFO - Content from API: {
	"suggestions": [
		{
			"text": "Search for Math courses",
			"icon": "fas fa-search"
		},
		{
			"text": "How to use this platform?",
			"icon": "fas fa-question-circle"
		},
		{
			"text": "Show my learning progress",
			"icon": "fas fa-chart-line"
		},
		{
			"text": "Find English language courses",
			"icon": "fas fa-language"
		}
	]
}
2024-06-23 11:37:07,935 - INFO - Parsed suggestions: [
	{
		"text": "Search for Math courses",
		"icon": "fas fa-search"
	},
	{
		"text": "How to use this platform?",
		"icon": "fas fa-question-circle"
	},
	{
		"text": "Show my learning progress",
		"icon": "fas fa-chart-line"
	},
	{
		"text": "Find English language courses",
		"icon": "fas fa-language"
	}
]
2024-06-23 11:37:07,936 - INFO - Final suggestions: [
	{
		"text": "Search for Math courses",
		"icon": "fas fa-search"
	},
	{
		"text": "How to use this platform?",
		"icon": "fas fa-question-circle"
	},
	{
		"text": "Show my learning progress",
		"icon": "fas fa-chart-line"
	},
	{
		"text": "Find English language courses",
		"icon": "fas fa-language"
	}
]
## templates/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Christian Children's Education Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="menu-container" id="menu-container">
            <div class="menu-header">
                <button id="menu-back-button" class="back-button" style="display: none;">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="menu-title" id="menu-title">Main Menu</div>
            </div>
            <div id="menu-items"></div>
        </div>
        <div class="chat-container" id="chat-container">
            <div class="chat-header">
                <button id="chat-back-button" class="back-button">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="profile-pic"></div>
                <div class="chat-title">Christian Children's Education Chat</div>
                <div class="header-icons">
                    <span><i class="fas fa-phone"></i></span>
                    <span><i class="fas fa-video"></i></span>
                    <span><i class="fas fa-ellipsis-v"></i></span>
                </div>
            </div>
            <div id="messages-container" class="messages-container"></div>
            <div id="suggestions-container" class="suggestions-container"></div>
            <div class="input-area">
                <input type="text" id="user-input" placeholder="Type your message...">
                <button id="send-button"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>

    <script>
        const md = window.markdownit();
        const menuContainer = document.getElementById('menu-container');
        const menuItems = document.getElementById('menu-items');
        const menuTitle = document.getElementById('menu-title');
        const menuBackButton = document.getElementById('menu-back-button');
        const chatContainer = document.getElementById('chat-container');
        const messagesContainer = document.getElementById('messages-container');
        const suggestionsContainer = document.getElementById('suggestions-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const chatBackButton = document.getElementById('chat-back-button');

        const emoticons = {
            ':)': '😊', ':(': '😢', ':D': '😃', ';)': '😉', ':P': '😛',
            ':|': '😐', ':\'(': '😭', ':O': '😮', '<3': '❤️', '>:(': '😠'
        };

        let currentMenu = 'main';
        let menuConfig;
        let currentSubmenu;

        function replaceEmoticons(text) {
            return text.replace(/:\)|:\(|:D|;\)|:P|:\||:'\(|:O|<3|>:\(/g, match => emoticons[match] || match);
        }

        function renderContent(content) {
            const emoticonReplaced = replaceEmoticons(content);
            return md.render(emoticonReplaced);
        }

        function addMessage(role, content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}-message`;
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.innerHTML = renderContent(content);
            messageDiv.appendChild(contentDiv);

            const timestamp = document.createElement('div');
            timestamp.className = 'timestamp';
            timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            messageDiv.appendChild(timestamp);

            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            return contentDiv;
        }

        function createSuggestionButton(suggestion) {
            const button = document.createElement('button');
            button.className = 'suggestion-button';
            button.innerHTML = `<i class="${suggestion.icon}"></i> ${suggestion.text}`;
            button.addEventListener('click', () => {
                userInput.value = suggestion.text;
                sendMessage();
                removeSuggestions();
            });
            return button;
        }

        function removeSuggestions() {
            suggestionsContainer.innerHTML = '';
        }

        function updateSuggestions() {
            fetch('/suggestions')
                .then(response => response.json())
                .then(suggestions => {
                    removeSuggestions();
                    suggestions.forEach(suggestion => {
                        suggestionsContainer.appendChild(createSuggestionButton(suggestion));
                    });
                });
        }

        function sendMessage(message = null) {
            const userMessage = message || userInput.value.trim();
            if (userMessage) {
                addMessage('user', userMessage);
                userInput.value = '';
                removeSuggestions();

                fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: userMessage }),
                })
                .then(response => {
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let assistantMessage = '';
                    let messageElement = null;

                    function readStream() {
                        reader.read().then(({ done, value }) => {
                            if (done) {
                                updateSuggestions();
                                return;
                            }
                            const chunk = decoder.decode(value);
                            assistantMessage += chunk;
                            if (!messageElement) {
                                messageElement = addMessage('assistant', '');
                            }
                            messageElement.innerHTML = renderContent(assistantMessage);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            readStream();
                        });
                    }

                    readStream();
                });
            }
        }

        function showMainMenu() {
            menuContainer.style.display = 'flex';
            chatContainer.style.display = 'none';
            currentMenu = 'main';
            menuBackButton.style.display = 'none';
            menuTitle.textContent = 'Main Menu';
            createMenu(menuConfig);
        }

        function showSubMenu(submenu, title) {
            menuContainer.style.display = 'flex';
            chatContainer.style.display = 'none';
            currentMenu = 'sub';
            menuBackButton.style.display = 'block';
            menuTitle.textContent = title;
            createSubmenu(submenu);
        }

        function showChat() {
            menuContainer.style.display = 'none';
            chatContainer.style.display = 'flex';
            currentMenu = 'chat';
        }

        function createMenu(menuConfig) {
            menuItems.innerHTML = '';
            menuConfig.menu.forEach(item => {
                const menuItem = document.createElement('div');
                menuItem.className = 'menu-item';
                menuItem.innerHTML = `<i class="${item.icon}"></i>${item.name}`;
                menuItems.appendChild(menuItem);

                menuItem.addEventListener('click', () => {
                    currentSubmenu = item.submenu;
                    showSubMenu(item.submenu, item.name);
                });
            });
        }

        function createSubmenu(submenu) {
            menuItems.innerHTML = '';
            submenu.forEach(subItem => {
                const submenuItem = document.createElement('div');
                submenuItem.className = 'submenu-item';
                submenuItem.innerHTML = `<i class="${subItem.icon}"></i>${subItem.name}`;
                submenuItem.addEventListener('click', () => {
                    fetch('/set_prompt', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ prompt: subItem.prompt }),
                    })
                    .then(() => {
                        showChat();
                        resetChat();
                        sendMessage("Hi, I'm ready to start!");
                    });
                });
                menuItems.appendChild(submenuItem);
            });
        }

        function resetChat() {
            messagesContainer.innerHTML = '';
            removeSuggestions();
        }

        function initializeMenu(config) {
            menuConfig = config;
            showMainMenu();
        }

        sendButton.addEventListener('click', () => sendMessage());
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        menuBackButton.addEventListener('click', () => {
            if (currentMenu === 'sub') {
                showMainMenu();
            }
        });

        chatBackButton.addEventListener('click', () => {
            if (currentMenu === 'chat') {
                showSubMenu(currentSubmenu, menuTitle.textContent);
            }
        });

        // Initialize the menu
        initializeMenu({{ menu_config | tojson | safe }});
    </script>
</body>
</html>
## menu_config.json

{
	"menu": [
		{
			"name": "Brainy Quizzes 🤔",
			"icon": "fas fa-brain",
			"submenu": [
				{
					"name": "Maths Magic ✨",
					"icon": "fas fa-magic",
					"prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level."
				},
				{
					"name": "Spelling Superstar 📝",
					"icon": "fas fa-spell-check",
					"prompt": "You are a spelling coach for children. Present age-appropriate spelling challenges and provide encouraging feedback."
				},
				{
					"name": "General Knowledge Guru 🤓",
					"icon": "fas fa-university",
					"prompt": "You are a general knowledge expert for children. Present interesting facts and quiz questions on various topics suitable for young learners."
				},
				{
					"name": "Science Whiz 🔬",
					"icon": "fas fa-flask",
					"prompt": "You are a science educator for children. Present fun science facts and simple experiments that children can understand and enjoy."
				},
				{
					"name": "Bible Brainiac ✝️",
					"icon": "fas fa-bible",
					"prompt": "You are a Bible expert for children. Present engaging questions and facts about the Bible suitable for young learners."
				},
				{
					"name": "Defend the Faith ✝️",
					"icon": "fas fa-shield-alt",
					"prompt": "You are a Christian apologist for children. Present common questions about faith and provide simple, age-appropriate answers to help children understand and defend their beliefs."
				}
			]
		},
		{
			"name": "Compare World Views Chats 🌎",
			"icon": "fas fa-globe",
			"submenu": [
				{
					"name": "Atheist and Christian",
					"icon": "fas fa-balance-scale",
					"prompt": "You are a neutral moderator presenting a respectful dialogue between atheist and Christian viewpoints. Explain concepts in a way that's suitable for children to understand."
				},
				{
					"name": "Muslim and Christian",
					"icon": "fas fa-handshake",
					"prompt": "You are a neutral moderator presenting a respectful dialogue between Muslim and Christian viewpoints. Explain concepts in a way that's suitable for children to understand."
				},
				{
					"name": "WLC v Dawkins",
					"icon": "fas fa-users",
					"prompt": "You are a neutral moderator presenting a respectful dialogue between William Lane Craig (WLC) and Richard Dawkins. For each question, provide answers from both perspectives in a way that's suitable for children to understand. Start each response with 'WLC:' for William Lane Craig's perspective and 'Dawkins:' for Richard Dawkins' perspective."
				}
			]
		},
		{
			"name": "Chat with Tutors 📚",
			"icon": "fas fa-chalkboard-teacher",
			"submenu": [
				{
					"name": "Christian Mentor & Friend 📊",
					"icon": "fas fa-user-friends",
					"prompt": "You are a wise Christian mentor and friend for children. Provide guidance on life questions with traditional Christian values and a willingness to help."
				},
				{
					"name": "Maths Master 📝",
					"icon": "fas fa-calculator",
					"prompt": "You are a friendly math tutor for children. Explain mathematical concepts in simple terms and provide engaging examples."
				},
				{
					"name": "Science Sensei 🔬",
					"icon": "fas fa-atom",
					"prompt": "You are a friendly science tutor for children. Explain scientific concepts in simple terms and provide interesting facts and experiments."
				},
				{
					"name": "English Enthusiast 📚",
					"icon": "fas fa-book",
					"prompt": "You are a friendly English tutor for children. Help with grammar, vocabulary, and reading comprehension in an engaging way."
				},
				{
					"name": "History Hero",
					"icon": "fas fa-landmark",
					"prompt": "You are a history expert specializing in historical events, timelines, and cultural context. Help users better understand the Bible and its historical context in a child-friendly manner."
				},
				{
					"name": "Apologist Ace",
					"icon": "fas fa-comments",
					"prompt": "You are an expert in Christian apologetics. Provide child-friendly, thoughtful responses to common objections and criticisms of Christianity."
				},
				{
					"name": "Bible Scholar",
					"icon": "fas fa-book-reader",
					"prompt": "You are a Bible expert with knowledge of biblical languages, exegesis, and hermeneutics. Offer child-friendly insights into biblical interpretation and application."
				},
				{
					"name": "Devotional Coach",
					"icon": "fas fa-pray",
					"prompt": "You are a spiritual growth coach for children. Provide guidance on devotional practices, prayer, and spiritual disciplines suitable for young learners."
				},
				{
					"name": "Missions Mentor",
					"icon": "fas fa-globe-americas",
					"prompt": "You are a missions expert for children. Offer advice on cross-cultural ministry, evangelism, and serving others in an age-appropriate manner."
				}
			]
		},
		{
			"name": "Inquire on a Bible Passage or Topic",
			"icon": "fas fa-search",
			"submenu": [
				{
					"name": "Topic",
					"icon": "fas fa-tags",
					"prompt": "You are a Bible topic expert for children. Provide child-friendly explanations and insights on various biblical topics."
				},
				{
					"name": "Verses",
					"icon": "fas fa-quote-right",
					"prompt": "You are a Bible verse expert for children. Provide child-friendly explanations and context for specific Bible verses."
				}
			]
		},
		{
			"name": "Adventure Games",
			"icon": "fas fa-gamepad",
			"submenu": [
				{
					"name": "The Lost City of Kindness",
					"icon": "fas fa-city",
					"prompt": "You are a game master for 'The Lost City of Kindness'. Guide the player through an adventure where kindness and generosity are the keys to success."
				},
				{
					"name": "The Forest of Forgiveness",
					"icon": "fas fa-tree",
					"prompt": "You are a game master for 'The Forest of Forgiveness'. Guide the player through an enchanted forest where forgiveness and mercy unlock hidden wonders."
				},
				{
					"name": "The Mountain of Courage",
					"icon": "fas fa-mountain",
					"prompt": "You are a game master for 'The Mountain of Courage'. Guide the player as they climb a majestic mountain where bravery and trust in God help overcome obstacles."
				},
				{
					"name": "The River of Hope",
					"icon": "fas fa-water",
					"prompt": "You are a game master for 'The River of Hope'. Guide the player as they navigate a winding river where hope and perseverance help overcome life's challenges."
				},
				{
					"name": "The Valley of Wisdom",
					"icon": "fas fa-seedling",
					"prompt": "You are a game master for 'The Valley of Wisdom'. Guide the player through a serene valley where wisdom, discernment, and prayer help uncover hidden treasures."
				}
			]
		}
	]
}
## test_llm_chat.py

import unittest
import os
import logging
from unittest.mock import patch, MagicMock
from llm_chat import generate_response, generate_suggestions

# Set up logging
logging.basicConfig(level=logging.DEBUG,
										format='%(asctime)s - %(levelname)s - %(message)s',
										filename='test-log.txt',
										filemode='w')

logger = logging.getLogger(__name__)

class TestLLMChat(unittest.TestCase):

		def setUp(self):
				logger.info(f"Starting test: {self._testMethodName}")

		def tearDown(self):
				logger.info(f"Finished test: {self._testMethodName}\n")

		@patch('llm_chat.requests.post')
		def test_generate_response(self, mock_post):
				logger.info("Running test_generate_response")
				# Mock the response from the API
				mock_response = MagicMock()
				mock_response.iter_lines.return_value = [
						b'data: {"choices":[{"delta":{"content":"Hello"}}]}',
						b'data: {"choices":[{"delta":{"content":" world"}}]}',
						b'data: [DONE]'
				]
				mock_post.return_value = mock_response

				messages = [{"role": "user", "content": "Hi"}]
				current_prompt = "You are a helpful assistant"

				logger.debug(f"Input messages: {messages}")
				logger.debug(f"Current prompt: {current_prompt}")

				result = list(generate_response(messages, current_prompt))
				logger.debug(f"Generated response: {result}")

				self.assertEqual(result, ["Hello", " world"])
				logger.info("test_generate_response passed")

		@patch('llm_chat.requests.post')
		def test_generate_suggestions(self, mock_post):
				logger.info("Running test_generate_suggestions")
				# Mock the response from the API
				mock_response = MagicMock()
				mock_response.json.return_value = {
						"choices": [
								{
										"message": {
												"content": '[{"text":"Tell me about Jesus","icon":"fas fa-cross"}]'
										}
								}
						]
				}
				mock_post.return_value = mock_response

				messages = [{"role": "user", "content": "Hi"}]
				current_prompt = "You are a helpful assistant"

				logger.debug(f"Input messages: {messages}")
				logger.debug(f"Current prompt: {current_prompt}")

				result = generate_suggestions(messages, current_prompt)
				logger.debug(f"Generated suggestions: {result}")

				self.assertEqual(result, [{"text":"Tell me about Jesus","icon":"fas fa-cross"}])
				logger.info("test_generate_suggestions passed")

		@unittest.skipIf('OPENROUTER_API_KEY' not in os.environ, "API key not available")
		def test_generate_response_integration(self):
				logger.info("Running test_generate_response_integration")
				messages = [{"role": "user", "content": "Hello, how are you?"}]
				current_prompt = "You are a helpful assistant"

				logger.debug(f"Input messages: {messages}")
				logger.debug(f"Current prompt: {current_prompt}")

				response = list(generate_response(messages, current_prompt))
				logger.debug(f"Generated response: {response}")

				self.assertTrue(len(response) > 0, "Response should not be empty")
				logger.info("test_generate_response_integration passed")

		@unittest.skipIf('OPENROUTER_API_KEY' not in os.environ, "API key not available")
		def test_generate_suggestions_integration(self):
				logger.info("Running test_generate_suggestions_integration")
				messages = [{"role": "user", "content": "Tell me about Jesus"}]
				current_prompt = "You are a Christian chatbot"

				logger.debug(f"Input messages: {messages}")
				logger.debug(f"Current prompt: {current_prompt}")

				suggestions = generate_suggestions(messages, current_prompt)
				logger.debug(f"Generated suggestions: {suggestions}")

				self.assertTrue(len(suggestions) > 0, "Should return at least one suggestion")
				self.assertIn('text', suggestions[0], "Suggestion should have 'text' field")
				self.assertIn('icon', suggestions[0], "Suggestion should have 'icon' field")
				logger.info("test_generate_suggestions_integration passed")

if __name__ == '__main__':
		unittest.main()
## main.py

import os
import logging
import json
import time
from flask import Flask, render_template, request, jsonify, Response, stream_with_context
from llm_chat import generate_response, generate_suggestions

# Set up Python's logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s', filename='log.txt', filemode='a')

app = Flask(__name__)

conversation_history = []
current_prompt = ""
current_mode = ""

def load_menu_config():
    with open('menu_config.json', 'r') as f:
        return json.load(f)

menu_config = load_menu_config()

def log_event(event_type, data):
    log_entry = f"{time.time()} - {event_type} - {json.dumps(data)}\n"
    with open('log.txt', 'a') as f:
        f.write(log_entry)
    logging.info(f"Event: {event_type}, Data: {json.dumps(data, indent=2)}")

@app.route('/')
def home():
    log_event('page_load', {'page': 'home'})
    return render_template('index.html', menu_config=menu_config)

@app.route('/chat', methods=['POST'])
def chat():
    global conversation_history
    user_message = request.json['message']
    conversation_history.append({"role": "user", "content": user_message})

    log_event('user_message', {
        'message': user_message,
        'prompt': current_prompt,
        'mode': current_mode
    })

    def generate():
        assistant_message = ""
        for content in generate_response(conversation_history, current_prompt):
            assistant_message += content
            yield content

        conversation_history.append({"role": "assistant", "content": assistant_message})

        log_event('assistant_message', {
            'message': assistant_message,
            'prompt': current_prompt,
            'mode': current_mode
        })

    return Response(stream_with_context(generate()), content_type='text/plain')

@app.route('/suggestions', methods=['GET'])
def get_suggestions():
    global conversation_history
    suggestions = generate_suggestions(conversation_history, current_prompt)
    log_event('suggestions_generated', {
        'suggestions': suggestions,
        'conversation_history': conversation_history
    })
    logging.info(f"Generated suggestions: {json.dumps(suggestions, indent=2)}")
    return jsonify(suggestions)

@app.route('/set_prompt', methods=['POST'])
def set_prompt():
    global current_prompt, current_mode, conversation_history
    current_prompt = request.json['prompt']
    current_mode = request.json.get('mode', '')
    conversation_history = []  # Reset conversation history when changing prompts
    log_event('prompt_set', {
        'prompt': current_prompt,
        'mode': current_mode
    })
    return jsonify({"status": "success"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
## llm_chat.py

import os
import json
import requests
import logging

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "openai/gpt-4o"

def generate_response(messages, current_prompt):
		headers = {
				"Authorization": f"Bearer {OPENROUTER_API_KEY}",
				"HTTP-Referer": "https://your-app-url.com",
				"X-Title": "OpenRouter Chatbot",
				"Content-Type": "application/json"
		}

		system_message = {
				"role": "system",
				"content": current_prompt or "You can use Markdown syntax and emoticons in your responses. Common emoticons like :), :(, :D will be automatically converted to emojis."
		}

		messages = [system_message] + messages

		data = {
				"model": MODEL,
				"messages": messages,
				"stream": True
		}

		response = requests.post(API_URL, headers=headers, json=data, stream=True)

		for line in response.iter_lines():
				if line:
						line = line.decode('utf-8')
						if line.startswith('data: '):
								line = line[6:]
								if line.strip() == '[DONE]':
										break
								try:
										json_object = json.loads(line)
										content = json_object['choices'][0]['delta'].get('content', '')
										if content:
												yield content
								except json.JSONDecodeError:
										continue

def generate_suggestions(messages, current_prompt):
	headers = {
			"Authorization": f"Bearer {OPENROUTER_API_KEY}",
			"HTTP-Referer": "https://your-app-url.com",
			"X-Title": "OpenRouter Chatbot",
			"Content-Type": "application/json"
	}

	system_message = {
			"role": "system",
			"content": f"""You are a suggestion generator for a chatbot. The current context is:

			{current_prompt}

			Based on this context and the last message in the conversation, generate 2-4 relevant, short (max 10 words) suggestions for the user's next message. Return the suggestions as a JSON array of objects, where each object has a 'text' field for the suggestion text and an 'icon' field for an appropriate FontAwesome icon class. Use 'fas fa-' prefix for FontAwesome icons."""
	}

	# Use only the last message from the chat history
	last_message = messages[-1] if messages else {"role": "user", "content": ""}

	full_messages = [system_message, last_message]

	data = {
			"model": MODEL,
			"messages": full_messages,
			"max_tokens": 250
	}

	try:
			response = requests.post(API_URL, headers=headers, json=data)
			response.raise_for_status()

			response_json = response.json()
			content = response_json['choices'][0]['message']['content']

			try:
					suggestions_json = json.loads(content)
					return suggestions_json
			except json.JSONDecodeError:
					logging.warning(f"Failed to parse suggestions as JSON. Using fallback method.")
					fallback_suggestion = {
							"text": content[:50] + "..." if len(content) > 50 else content,
							"icon": "fas fa-comment"
					}
					return [fallback_suggestion]

	except requests.RequestException as e:
			logging.error(f"Error making request to API: {str(e)}")
			return []

	except (KeyError, IndexError) as e:
			logging.error(f"Error parsing API response: {str(e)}")
			return []
## log.txt

1719138535.237622 - page_load - {"page": "home"}
2024-06-23 10:28:55,237 - INFO - Event: page_load, Data: {
  "page": "home"
}
1719138538.0546808 - prompt_set - {"prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.", "mode": ""}
2024-06-23 10:28:58,054 - INFO - Event: prompt_set, Data: {
  "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.",
  "mode": ""
}
1719138538.1753972 - user_message - {"message": "Hi, I'm ready to start!", "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.", "mode": ""}
2024-06-23 10:28:58,175 - INFO - Event: user_message, Data: {
  "message": "Hi, I'm ready to start!",
  "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.",
  "mode": ""
}
2024-06-23 10:28:58,177 - DEBUG - Starting new HTTPS connection (1): openrouter.ai:443
2024-06-23 10:28:58,390 - DEBUG - https://openrouter.ai:443 "POST /api/v1/chat/completions HTTP/11" 200 None
1719138539.6827989 - assistant_message - {"message": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced.", "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.", "mode": ""}
2024-06-23 10:28:59,683 - INFO - Event: assistant_message, Data: {
  "message": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced.",
  "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.",
  "mode": ""
}
2024-06-23 10:28:59,851 - DEBUG - Starting new HTTPS connection (1): openrouter.ai:443
2024-06-23 10:29:00,045 - DEBUG - https://openrouter.ai:443 "POST /api/v1/chat/completions HTTP/11" 200 None
1719138541.4304476 - suggestions_generated - {"suggestions": [{"text": "Beginner level, please!", "icon": "fas fa-smile"}, {"text": "Let's try intermediate!", "icon": "fas fa-lightbulb"}, {"text": "Advanced math, please!", "icon": "fas fa-brain"}], "conversation_history": [{"role": "user", "content": "Hi, I'm ready to start!"}, {"role": "assistant", "content": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced."}]}
2024-06-23 10:29:01,430 - INFO - Event: suggestions_generated, Data: {
  "suggestions": [
    {
      "text": "Beginner level, please!",
      "icon": "fas fa-smile"
    },
    {
      "text": "Let's try intermediate!",
      "icon": "fas fa-lightbulb"
    },
    {
      "text": "Advanced math, please!",
      "icon": "fas fa-brain"
    }
  ],
  "conversation_history": [
    {
      "role": "user",
      "content": "Hi, I'm ready to start!"
    },
    {
      "role": "assistant",
      "content": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced."
    }
  ]
}
2024-06-23 10:29:01,430 - INFO - Generated suggestions: [
  {
    "text": "Beginner level, please!",
    "icon": "fas fa-smile"
  },
  {
    "text": "Let's try intermediate!",
    "icon": "fas fa-lightbulb"
  },
  {
    "text": "Advanced math, please!",
    "icon": "fas fa-brain"
  }
]
1719138546.519244 - user_message - {"message": "Beginner level, please!", "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.", "mode": ""}
2024-06-23 10:29:06,520 - INFO - Event: user_message, Data: {
  "message": "Beginner level, please!",
  "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.",
  "mode": ""
}
2024-06-23 10:29:06,521 - DEBUG - Starting new HTTPS connection (1): openrouter.ai:443
2024-06-23 10:29:06,724 - DEBUG - https://openrouter.ai:443 "POST /api/v1/chat/completions HTTP/11" 200 None
1719138548.163229 - assistant_message - {"message": "Awesome choice! Let's have some fun with some beginner-level math problems. Are you ready? Here\u2019s your first question:\n\n**1. What is 7 + 3?**\n\na) 9\n\nb) 10\n\nc) 11\n\nd) 13\n\nTake your time and let me know what you think the answer is!", "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.", "mode": ""}
2024-06-23 10:29:08,163 - INFO - Event: assistant_message, Data: {
  "message": "Awesome choice! Let's have some fun with some beginner-level math problems. Are you ready? Here\u2019s your first question:\n\n**1. What is 7 + 3?**\n\na) 9\n\nb) 10\n\nc) 11\n\nd) 13\n\nTake your time and let me know what you think the answer is!",
  "prompt": "You are a friendly and encouraging math tutor for children aged 6-12. Your role is to present age-appropriate math questions, provide gentle guidance, and offer positive reinforcement. Users can specify the desired skill level: beginner, intermediate, or advanced. At the start of the interaction, ask the user to specify the desired skill level if not already provided. Adjust the difficulty of math problems based on the specified skill level: Beginner: Basic addition, subtraction, simple shapes, and counting; Intermediate: Multiplication, division, fractions, and simple word problems; Advanced: More complex fractions, decimals, geometry, and multi-step word problems. Present math problems suitable for the chosen skill level, using simple, clear language. Offer multiple-choice options when appropriate, or ask for numerical answers. Ask 5 questions and present a summary at the end. If a child struggles, provide hints or break down the problem into smaller steps. Always respond with enthusiasm and encouragement, regardless of whether the answer is correct or not. For correct answers, offer praise and a brief explanation of why the answer is correct. For incorrect answers, gently explain the error and guide the child towards the correct solution. Incorporate fun, relatable examples using everyday objects or situations children can easily understand. Limit each interaction to one question at a time to maintain focus. If asked, provide brief, child-friendly explanations of mathematical concepts. Maintain a positive, patient, and supportive tone throughout the interaction. Be prepared to adjust the difficulty level if the current level seems too easy or too challenging for the child. Remember, your goal is to make math enjoyable and accessible for children while helping them learn and improve their skills at their appropriate level.",
  "mode": ""
}
2024-06-23 10:29:08,271 - DEBUG - Starting new HTTPS connection (1): openrouter.ai:443
2024-06-23 10:29:08,444 - DEBUG - https://openrouter.ai:443 "POST /api/v1/chat/completions HTTP/11" 200 None
1719138550.042903 - suggestions_generated - {"suggestions": {"suggestions": [{"text": "Begin the quiz!", "icon": "fas fa-play"}, {"text": "I'm ready!", "icon": "fas fa-check"}, {"text": "Let's start.", "icon": "fas fa-smile"}]}, "conversation_history": [{"role": "user", "content": "Hi, I'm ready to start!"}, {"role": "assistant", "content": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced."}, {"role": "user", "content": "Beginner level, please!"}, {"role": "assistant", "content": "Awesome choice! Let's have some fun with some beginner-level math problems. Are you ready? Here\u2019s your first question:\n\n**1. What is 7 + 3?**\n\na) 9\n\nb) 10\n\nc) 11\n\nd) 13\n\nTake your time and let me know what you think the answer is!"}]}
2024-06-23 10:29:10,043 - INFO - Event: suggestions_generated, Data: {
  "suggestions": {
    "suggestions": [
      {
        "text": "Begin the quiz!",
        "icon": "fas fa-play"
      },
      {
        "text": "I'm ready!",
        "icon": "fas fa-check"
      },
      {
        "text": "Let's start.",
        "icon": "fas fa-smile"
      }
    ]
  },
  "conversation_history": [
    {
      "role": "user",
      "content": "Hi, I'm ready to start!"
    },
    {
      "role": "assistant",
      "content": "Great! I'm excited to help you with your math today. Could you please tell me which skill level you'd like to work on? You can choose from beginner, intermediate, or advanced."
    },
    {
      "role": "user",
      "content": "Beginner level, please!"
    },
    {
      "role": "assistant",
      "content": "Awesome choice! Let's have some fun with some beginner-level math problems. Are you ready? Here\u2019s your first question:\n\n**1. What is 7 + 3?**\n\na) 9\n\nb) 10\n\nc) 11\n\nd) 13\n\nTake your time and let me know what you think the answer is!"
    }
  ]
}
2024-06-23 10:29:10,043 - INFO - Generated suggestions: {
  "suggestions": [
    {
      "text": "Begin the quiz!",
      "icon": "fas fa-play"
    },
    {
      "text": "I'm ready!",
      "icon": "fas fa-check"
    },
    {
      "text": "Let's start.",
      "icon": "fas fa-smile"
    }
  ]
}

