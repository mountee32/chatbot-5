You are Tom, the worlds greatest software engineer.

This is my website chat program being developed in replit IDE based on flask

It has multi-user chatting with a LLM

this is a chat based website for young christians to explore their faith

If recommending changes to a specifc file then please give the full file contents and not just the changes, there is no need to also describe the changes unless there is a problem I need to be aware of. 

Don't be lazy, give the full file for each changing file and don't expect me to merge on and new files.
----- Instructions -----------
when the chat starts, why is the input area not at the bottom of the chat as you can see in the image

----------------
## templates/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Christian Children's Education Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="menu-container" id="menu-container">
            <div class="menu-header">
                <button id="menu-back-button" class="back-button" style="display: none;">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="menu-title" id="menu-title">Main Menu</div>
            </div>
            <div class="menu-items-container" id="menu-items"></div>
        </div>
    </div>

    <script>
        const menuContainer = document.getElementById('menu-container');
        const menuItems = document.getElementById('menu-items');
        const menuTitle = document.getElementById('menu-title');
        const menuBackButton = document.getElementById('menu-back-button');

        let currentMenu = 'main';
        let menuConfig;
        let currentSubmenu;

        function showMainMenu() {
            menuContainer.style.display = 'flex';
            currentMenu = 'main';
            menuBackButton.style.display = 'none';
            menuTitle.textContent = 'Main Menu';
            createMenu(menuConfig);
            fadeInMenuItems();
        }

        function showSubMenu(submenu, title) {
            menuContainer.style.display = 'flex';
            currentMenu = 'sub';
            menuBackButton.style.display = 'block';
            menuTitle.textContent = title;
            createSubmenu(submenu);
            fadeInMenuItems();
        }

        function createMenu(menuConfig) {
            menuItems.innerHTML = '';
            menuConfig.menu.forEach(item => {
                const menuItem = document.createElement('div');
                menuItem.className = 'menu-item';
                menuItem.innerHTML = `<i class="${item.icon}"></i>${item.name}`;
                menuItems.appendChild(menuItem);

                menuItem.addEventListener('click', () => {
                    currentSubmenu = item.submenu;
                    fadeOutMenuItems(menuItem);
                    setTimeout(() => {
                        showSubMenu(item.submenu, item.name);
                    }, 300);
                });
            });
        }

        function createSubmenu(submenu) {
            menuItems.innerHTML = '';
            submenu.forEach(subItem => {
                const submenuItem = document.createElement('div');
                submenuItem.className = 'submenu-item';
                submenuItem.innerHTML = `<i class="${subItem.icon}"></i>${subItem.name}`;
                submenuItem.addEventListener('click', () => {
                    fadeOutMenuItems(submenuItem);
                    setTimeout(() => {
                        window.location.href = `/chat?prompt=${encodeURIComponent(subItem.prompt)}&avatar=${encodeURIComponent(subItem.avatar)}`;
                    }, 300);
                });
                menuItems.appendChild(submenuItem);
            });
        }

        function fadeOutMenuItems(selectedItem) {
            const items = menuItems.querySelectorAll('.menu-item, .submenu-item');
            items.forEach(item => {
                if (item !== selectedItem) {
                    item.classList.add('fade-out');
                }
            });
            setTimeout(() => {
                selectedItem.classList.add('fade-out');
            }, 150);
        }

        function fadeInMenuItems() {
            const items = menuItems.querySelectorAll('.menu-item, .submenu-item');
            items.forEach((item, index) => {
                setTimeout(() => {
                    item.classList.remove('fade-out');
                    item.classList.add('fade-in');
                }, index * 50);
            });
        }

        function initializeMenu(config) {
            menuConfig = config;
            showMainMenu();
        }

        menuBackButton.addEventListener('click', () => {
            if (currentMenu === 'sub') {
                showMainMenu();
            }
        });

        // Initialize the menu
        initializeMenu({{ menu_config | tojson | safe }});
    </script>
</body>
</html>
## templates/chat.html

<!DOCTYPE html>
<html lang="en">
<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Christian Children's Education Chat</title>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js"></script>
		<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
		<link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
		<div class="container">
				<div class="chat-container" id="chat-container">
						<div class="chat-header">
								<button id="chat-back-button" class="back-button">
										<i class="fas fa-arrow-left"></i>
								</button>
								<div class="profile-pic"></div>
								<div class="chat-title">Christian Children's Education Chat</div>
								<div class="header-icons">
										<span><i class="fas fa-phone"></i></span>
										<span><i class="fas fa-video"></i></span>
										<span><i class="fas fa-ellipsis-v"></i></span>
								</div>
						</div>
						<div id="messages-container" class="messages-container"></div>
						<div id="suggestions-container" class="suggestions-container"></div>
						<div class="input-area">
								<input type="text" id="user-input" placeholder="Type your message...">
								<button id="send-button"><i class="fas fa-paper-plane"></i></button>
						</div>
				</div>
		</div>

		<script>
				const md = window.markdownit();
				const chatContainer = document.getElementById('chat-container');
				const messagesContainer = document.getElementById('messages-container');
				const suggestionsContainer = document.getElementById('suggestions-container');
				const userInput = document.getElementById('user-input');
				const sendButton = document.getElementById('send-button');
				const chatBackButton = document.getElementById('chat-back-button');

				const emoticons = {
						':)': '😊', ':(': '😢', ':D': '😃', ';)': '😉', ':P': '😛',
						':|': '😐', ':\'(': '😭', ':O': '😮', '<3': '❤️', '>:(': '😠'
				};

				let currentAvatar = '{{ avatar }}';
				let currentPrompt = '{{ prompt }}';

				function replaceEmoticons(text) {
						return text.replace(/:\)|:\(|:D|;\)|:P|:\||:'\(|:O|<3|>:\(/g, match => emoticons[match] || match);
				}

				function renderContent(content) {
						const emoticonReplaced = replaceEmoticons(content);
						return md.render(emoticonReplaced);
				}

				function addMessage(role, content) {
						const messageDiv = document.createElement('div');
						messageDiv.className = `message ${role}-message`;

						const avatarDiv = document.createElement('div');
						avatarDiv.className = 'avatar';
						if (role === 'user') {
								avatarDiv.innerHTML = '<img src="/static/assets/user-avatar.svg" alt="User">';
						} else {
								avatarDiv.innerHTML = `<img src="/static/assets/${currentAvatar}" alt="Assistant">`;
						}

						const contentDiv = document.createElement('div');
						contentDiv.className = 'message-content';
						contentDiv.innerHTML = renderContent(content);

						if (role === 'user') {
								messageDiv.appendChild(contentDiv);
								messageDiv.appendChild(avatarDiv);
						} else {
								messageDiv.appendChild(avatarDiv);
								messageDiv.appendChild(contentDiv);
						}

						messagesContainer.appendChild(messageDiv);
						messagesContainer.scrollTop = messagesContainer.scrollHeight;
						return contentDiv;
				}

				function createSuggestionButton(suggestion) {
						const button = document.createElement('button');
						button.className = 'suggestion-button';
						button.innerHTML = `<i class="${suggestion.icon}"></i> ${suggestion.text}`;
						button.addEventListener('click', () => {
								userInput.value = suggestion.text;
								sendMessage();
								removeSuggestions();
						});
						return button;
				}

				function removeSuggestions() {
						suggestionsContainer.innerHTML = '';
				}

				function updateSuggestions() {
						fetch('/suggestions')
								.then(response => response.json())
								.then(suggestions => {
										removeSuggestions();
										suggestions.forEach(suggestion => {
												suggestionsContainer.appendChild(createSuggestionButton(suggestion));
										});
								});
				}

				function sendMessage(message = null) {
						const userMessage = message || userInput.value.trim();
						if (userMessage) {
								addMessage('user', userMessage);
								userInput.value = '';
								removeSuggestions();

								fetch('/chat', {
										method: 'POST',
										headers: {
												'Content-Type': 'application/json',
										},
										body: JSON.stringify({ message: userMessage }),
								})
								.then(response => {
										const reader = response.body.getReader();
										const decoder = new TextDecoder();
										let assistantMessage = '';
										let messageElement = null;

										function readStream() {
												reader.read().then(({ done, value }) => {
														if (done) {
																updateSuggestions();
																return;
														}
														const chunk = decoder.decode(value);
														assistantMessage += chunk;
														if (!messageElement) {
																messageElement = addMessage('assistant', '');
														}
														messageElement.innerHTML = renderContent(assistantMessage);
														messagesContainer.scrollTop = messagesContainer.scrollHeight;
														readStream();
												});
										}

										readStream();
								});
						}
				}

				sendButton.addEventListener('click', () => sendMessage());
				userInput.addEventListener('keypress', (e) => {
						if (e.key === 'Enter') {
								sendMessage();
						}
				});

				chatBackButton.addEventListener('click', () => {
						window.location.href = '/';
				});

				// Initialize the chat
				sendMessage("Hi, I'm ready to start!");
		</script>
</body>
</html>
## static/styles.css

:root {
	--primary-color: #3449e5;
	--secondary-color: #3498db;
	--background-color: #ecf0f1;
	--text-color: #000000;
	--chat-bubble-user: #3498db;
	--chat-bubble-assistant: #2ecc71;
}

*, *::before, *::after {
	box-sizing: border-box;
}

body, html {
	height: 100%;
	margin: 0;
	padding: 0;
	font-family: 'Roboto', sans-serif;
	background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
	color: var(--text-color);
	overflow: hidden;
}

.container {
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	overflow: hidden;
}

.menu-container {
	background-color: rgba(255, 255, 255, 0.9);
	backdrop-filter: blur(10px);
	border-radius: 20px;
	padding: 20px;
	box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
	margin: 20px;
	flex-grow: 1;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: flex-start;
	overflow: auto;
	height: 100%;
}

.menu-items-container {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-items: flex-start;
	width: 100%;
}

.menu-header {
	display: flex;
	align-items: center;
	justify-content: center;
	margin-bottom: 20px;
	width: 100%;
	background-color: var(--primary-color);
	color: #ffffff;
	padding: 10px;
	border-radius: 10px;
}

.menu-title {
	font-size: 2.5em;
	font-weight: 700;
	text-align: center;
	text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
	margin-bottom: 20px;
	color: var(--text-color);
}

.menu-item, .submenu-item {
	cursor: pointer;
	padding: 15px 25px;
	margin: 10px;
	background-color: #ffffff;
	border-radius: 10px;
	transition: all 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
	display: flex;
	align-items: center;
	font-size: 1.2em;
	width: calc(50% - 20px);
	max-width: 250px;
	min-width: 200px;
	color: var(--text-color);
	word-wrap: break-word;
	white-space: normal;
	flex-grow: 1;
	box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.menu-item:hover, .submenu-item:hover {
	background-color: var(--secondary-color);
	color: #ffffff;
	transform: translateY(-5px);
	box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.menu-item i, .submenu-item i {
	margin-right: 15px;
	font-size: 1.5em;
}

.chat-container {
	display: flex;
	flex-direction: column;
	height: 100%;
	background-color: var(--background-color);
	overflow: hidden;
}

.chat-header {
	background-color: var(--primary-color);
	padding: 20px;
	display: flex;
	align-items: center;
	color: #ffffff;
}

.profile-pic {
	width: 40px;
	height: 40px;
	border-radius: 50%;
	background-color: #ffffff;
	margin-right: 10px;
}

.chat-title {
	flex-grow: 1;
	font-size: 1.2em;
	font-weight: bold;
}

.header-icons span {
	margin-left: 15px;
	cursor: pointer;
}

.messages-container {
	flex -grow: 1;
	overflow-y: auto;
	padding: 20px;
	margin-bottom: 10px;
}

.message {
	display: flex;
	margin-bottom: 10px;
}

.avatar {
	width: 40px;
	height: 40px;
	border-radius: 50%;
	overflow: hidden;
	margin-right: 10px;
}

.avatar img {
	width: 100%;
	height: 100%;
	object-fit: cover;
}

.user-message {
	flex-direction: row-reverse;
}

.user-message .avatar {
	margin-right: 0;
	margin-left: 10px;
}

.message-content {
	max-width: 70%;
	padding: 10px 15px;
	border-radius: 10px;
	background-color: #f0f0f0;
}

.user-message .message-content {
	background-color: var(--chat-bubble-user);
	color: #ffffff;
}

.assistant-message .message-content {
	background-color: var(--chat-bubble-assistant);
	color: #ffffff;
}

.suggestions-container {
	display: flex;
	flex-wrap: wrap;
	justify-content: flex-end;
	padding: 10px 20px;
	background-color: rgba(255, 255, 255, 0.05);
}

.suggestion-button {
	background-color: #ffffff;
	color: var(--primary-color);
	border: 1px solid var(--primary-color);
	border-radius: 15px;
	padding: 5px 10px;
	margin: 5px;
	cursor: pointer;
	font-size: 0.9em;
	transition: all 0.3s ease;
}

.suggestion-button:hover {
	background-color: var(--primary-color);
	color: #ffffff;
}

.input-area {
	background-color: #ffffff;
	padding: 15px 20px;
	display: flex;
	align-items: center;
	border-top: 1px solid #e0e0e0;
}

#user-input {
	flex-grow: 1;
	border: none;
	border-radius: 20px;
	padding: 10px 15px;
	margin-right: 10px;
	background-color: #f1f3f4;
	color: var(--text-color);
}

#send-button {
	background-color: var(--primary-color);
	border: none;
	color: white;
	cursor: pointer;
	font-size: 1.2em;
	padding: 10px;
	border-radius: 50%;
}

.back-button {
	background: none;
	border: none;
	color: white;
	font-size: 1.5em;
	cursor: pointer;
	margin-right: 10px;
}

.message.assistant-message {
	display: flex;
	justify-content: flex-start;
	align-items: flex-start;
}

.message.assistant-message .avatar {
	order: 2;
	margin-left: 10px;
}

.message.assistant-message .message-content {
	order: 1;
}

/* Fade animation styles */
.fade-out {
	opacity: 0;
	pointer-events: none;
}

.fade-in {
	opacity: 1;
	pointer-events: auto;
}
## menu_config.json

{
	"menu": [
		{
			"name": "Brainy Quizzes 🤔",
			"icon": "fas fa-brain",
			"submenu": [
				{
					"name": "Maths Magic ✨",
					"icon": "fas fa-magic",
					"prompt": "You are a friendly math tutor for children aged 6-12. Ask the child's preferred difficulty level. Present one age-appropriate math question at a time, using simple language and multiple-choice options when suitable. Provide gentle guidance, encouragement, and explanations. Adjust difficulty based on the child's performance.",
					"avatar": "man1.svg"
				},
				{
					"name": "Spelling Superstar 📝",
					"icon": "fas fa-spell-check",
					"prompt": "You are a spelling coach for children aged 6-12. Present one age-appropriate word at a time. Offer its meaning, use it in a sentence, and ask the child to spell it. Provide encouragement and helpful tips for tricky spellings.",
					"avatar": "woman1.svg"
				},
				{
					"name": "General Knowledge Guru 🤓",
					"icon": "fas fa-university",
					"prompt": "You are a general knowledge expert for children aged 6-12. Present one interesting fact or quiz question at a time on various topics. Engage the child with follow-up questions and provide simple explanations to help them understand and remember the information.",
					"avatar": "man2.svg"
				},
				{
					"name": "Science Whiz 🔬",
					"icon": "fas fa-flask",
					"prompt": "You are a science educator for children aged 6-12. Share one science fact or simple experiment at a time. Explain scientific concepts using everyday examples and ask questions to encourage curiosity and hands-on learning.",
					"avatar": "man3.svg"
				},
				{
					"name": "Bible Brainiac ✝️",
					"icon": "fas fa-bible",
					"prompt": "You are a Bible expert for children aged 6-12. Present one engaging question or fact about the Bible at a time. Cover stories from both Testaments, explain key concepts, and help children understand how biblical lessons apply to their daily lives.",
					"avatar": "woman1.svg"
				},
				{
					"name": "Defend the Faith ✝️",
					"icon": "fas fa-shield-alt",
					"prompt": "You are a Christian apologist for children aged 6-12. Present one common question about faith at a time and provide a simple, age-appropriate answer. Address topics like God's existence, Bible reliability, and Jesus' importance in an easy-to-grasp manner.",
					"avatar": "man1.svg"
				},
				{
					"name": "Language Explorer 🌍",
					"icon": "fas fa-language",
					"prompt": "You are a language tutor for children aged 6-12. Introduce one basic word or phrase from various languages at a time, focusing on greetings, numbers, colors, or common objects. Explain its meaning and ask the child to practice.",
					"avatar": "woman1.svg"
				}
			]
		},
		{
			"name": "Compare World Views Chats 🌎",
			"icon": "fas fa-globe",
			"submenu": [
				{
					"name": "Atheist and Christian",
					"icon": "fas fa-balance-scale",
					"prompt": "You are a neutral moderator presenting a dialogue between atheist and Christian viewpoints for children aged 6-12. Present one topic or question at a time, explaining both perspectives in simple terms. Encourage questions and emphasize mutual respect.",
					"avatars": ["man2.svg", "man3.svg"]
				},
				{
					"name": "Muslim and Christian",
					"icon": "fas fa-handshake",
					"prompt": "You are a neutral moderator presenting a dialogue between Muslim and Christian viewpoints for children aged 6-12. Discuss one aspect of faith at a time, highlighting similarities and differences. Use simple language and promote interfaith understanding.",
					"avatars": ["man1.svg", "woman1.svg"]
				},
				{
					"name": "WLC v Dawkins",
					"icon": "fas fa-users",
					"prompt": "You are a neutral moderator presenting a dialogue between William Lane Craig (WLC) and Richard Dawkins for children aged 6-12. Present one question at a time, offering both perspectives in simple terms. Start responses with 'WLC:' and 'Dawkins:' to differentiate views.",
					"avatars": ["man3.svg", "man2.svg"]
				},
				{
					"name": "Science and Faith",
					"icon": "fas fa-atom",
					"prompt": "You are a neutral moderator presenting a dialogue between scientific and faith-based perspectives for children aged 6-12. Discuss one topic at a time, explaining how science and faith can coexist. Use simple language and address common misconceptions.",
					"avatars": ["woman1.svg", "man2.svg"]
				}
			]
		},
		{
			"name": "Chat with Tutors 📚",
			"icon": "fas fa-chalkboard-teacher",
			"submenu": [
				{
					"name": "Christian Mentor & Friend 📊",
					"icon": "fas fa-user-friends",
					"prompt": "You are a wise Christian mentor for children aged 6-12. Listen to their questions or concerns about life, faith, family, or school. Offer guidance based on Christian values, one piece of advice at a time. Be supportive and encouraging.",
					"avatar": "woman1.svg"
				},
				{
					"name": "Maths Master 📝",
					"icon": "fas fa-calculator",
					"prompt": "You are a friendly math tutor for children aged 6-12. Help with one math concept or problem at a time. Explain ideas using simple terms and real-life examples. Offer practice problems and encourage questions.",
					"avatar": "man1.svg"
				},
				{
					"name": "Science Sensei 🔬",
					"icon": "fas fa-atom",
					"prompt": "You are a friendly science tutor for children aged 6-12. Explain one scientific concept at a time using simple terms. Share interesting facts and suggest easy experiments. Encourage curiosity and questions.",
					"avatar": "man2.svg"
				},
				{
					"name": "English Enthusiast 📚",
					"icon": "fas fa-book",
					"prompt": "You are a friendly English tutor for children aged 6-12. Focus on one language skill at a time (grammar, vocabulary, reading, or writing). Offer tips, suggest age-appropriate books, and use creative exercises to improve skills.",
					"avatar": "woman1.svg"
				},
				{
					"name": "History Hero",
					"icon": "fas fa-landmark",
					"prompt": "You are a history expert for children aged 6-12. Discuss one historical event or Bible-related historical context at a time. Use simple language and make connections between biblical events and world history. Encourage questions.",
					"avatar": "man3.svg"
				},
				{
					"name": "Apologist Ace",
					"icon": "fas fa-comments",
					"prompt": "You are an expert in Christian apologetics for children aged 6-12. Address one question or criticism about Christianity at a time. Use simple analogies and examples to explain complex concepts. Encourage further questions.",
					"avatar": "man2.svg"
				},
				{
					"name": "Bible Scholar",
					"icon": "fas fa-book-reader",
					"prompt": "You are a Bible expert for children aged 6-12. Focus on one Bible passage or concept at a time. Offer child-friendly insights into interpretation and application. Explain difficult passages and encourage questions about the context and meaning.",
					"avatar": "woman1.svg"
				},
				{
					"name": "Devotional Coach",
					"icon": "fas fa-pray",
					"prompt": "You are a spiritual growth coach for children aged 6-12. Introduce one devotional practice, prayer method, or spiritual discipline at a time. Offer simple, age-appropriate exercises to help children develop their faith. Encourage questions and reflection.",
					"avatar": "man1.svg"
				},
				{
					"name": "Missions Mentor",
					"icon": "fas fa-globe-americas",
					"prompt": "You are a missions expert for children aged 6-12. Share one story about missionaries or explain one aspect of cross-cultural ministry at a time. Discuss the importance of spreading God's love and encourage questions about different cultures.",
					"avatar": "man3.svg"
				},
				{
					"name": "Art & Creativity Guide",
					"icon": "fas fa-palette",
					"prompt": "You are an art and creativity tutor for children aged 6-12. Introduce one art technique or creative project idea at a time. Incorporate biblical themes when appropriate. Encourage self-expression and questions about the creative process.",
					"avatar": "woman1.svg"
				}
			]
		},
		{
			"name": "Inquire on a Bible Passage or Topic",
			"icon": "fas fa-search",
			"submenu": [
				{
					"name": "Topic",
					"icon": "fas fa-tags",
					"prompt": "You are a Bible topic expert for children aged 6-12. Discuss one biblical topic at a time. Use simple language and relevant examples. Encourage questions to help children understand and apply biblical teachings.",
					"avatar": "woman1.svg"
				},
				{
					"name": "Verses",
					"icon": "fas fa-quote-right",
					"prompt": "You are a Bible verse expert for children aged 6-12. Focus on one Bible verse at a time. Provide a child-friendly explanation and context. Help children understand the meaning and how to apply it in their daily lives. Encourage questions.",
					"avatar": "man2.svg"
				},
				{
					"name": "Bible Characters",
					"icon": "fas fa-user-friends",
					"prompt": "You are an expert on Bible characters for children aged 6-12. Introduce one character at a time, providing brief, interesting facts and a short story. Explain the lesson from this character in simple terms. Encourage questions and engagement.",
					"avatar": "woman1.svg"
				},
				{
					"name": "Bible Timeline",
					"icon": "fas fa-clock",
					"prompt": "You are a Bible timeline expert for children aged 6-12. Introduce one major Bible event at a time, explaining its place in the overall timeline. Use simple explanations and encourage questions about how events connect.",
					"avatar": "man3.svg"
				}
			]
		},
		{
			"name": "Adventure Games",
			"icon": "fas fa-gamepad",
			"submenu": [
				{
					"name": "The Lost City of Kindness",
					"icon": "fas fa-city",
					"prompt": "You are a game master for 'The Lost City of Kindness'. Guide the player through an adventure where kindness is key. Present one choice or challenge at a time, teaching the importance of being kind to others. Encourage player decisions and questions.",
					"avatar": "man1.svg"
				},
				{
					"name": "The Forest of Forgiveness",
					"icon": "fas fa-tree",
					"prompt": "You are a game master for 'The Forest of Forgiveness'. Guide the player through an enchanted forest where forgiveness unlocks wonders. Present one scenario at a time that demonstrates the power of forgiveness. Allow player choices and encourage questions.",
					"avatar": "woman1.svg"
				},
				{
					"name": "The Mountain of Courage",
					"icon": "fas fa-mountain",
					"prompt": "You are a game master for 'The Mountain of Courage'. Guide the player as they climb a mountain where bravery and trust in God help overcome obstacles. Present one challenge at a time that requires faith and courage. Encourage player decisions and reflection.",
					"avatar": "man3.svg"
				},
				{
					"name": "The River of Hope",
					"icon": "fas fa-water",
					"prompt": "You are a game master for 'The River of Hope'. Guide the player along a river where hope helps overcome challenges. Present one situation at a time that teaches the importance of maintaining hope. Allow player choices and encourage questions.",
					"avatar": "man2.svg"
				},
				{
					"name": "The Valley of Wisdom",
					"icon": "fas fa-seedling",
					"prompt": "You are a game master for 'The Valley of Wisdom'. Guide the player through a valley where wisdom uncovers treasures. Present one puzzle or dilemma at a time that requires wise decision-making. Encourage player choices and reflection.",
					"avatar": "woman1.svg"
				},
				{
					"name": "The Island of Faith",
					"icon": "fas fa-island-tropical",
					"prompt": "You are a game master for 'The Island of Faith'. Guide the player through an adventure where faith in God helps overcome seemingly impossible situations. Present one scenario at a time that demonstrates the power of faith. Encourage player decisions and questions.",
					"avatar": "man1.svg"
				}
			]
		}
	]
}
## llm_chat.py

import os
import json
import requests
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
API_URL = "https://openrouter.ai/api/v1/chat/completions"
CHATMODEL = "openai/gpt-4o"
SUGGESTMODEL = "openai/gpt-4"

def generate_response(messages, current_prompt):
		headers = {
				"Authorization": f"Bearer {OPENROUTER_API_KEY}",
				"HTTP-Referer": "https://your-app-url.com",
				"X-Title": "OpenRouter Chatbot",
				"Content-Type": "application/json"
		}

		system_message = {
				"role": "system",
				"content": current_prompt or "You can use Markdown syntax and emoticons in your responses. Common emoticons like :), :(, :D will be automatically converted to emojis."
		}

		messages = [system_message] + messages

		data = {
				"model": CHATMODEL,
				"messages": messages,
				"stream": True
		}

		response = requests.post(API_URL, headers=headers, json=data, stream=True)

		for line in response.iter_lines():
				if line:
						line = line.decode('utf-8')
						if line.startswith('data: '):
								line = line[6:]
								if line.strip() == '[DONE]':
										break
								try:
										json_object = json.loads(line)
										content = json_object['choices'][0]['delta'].get('content', '')
										if content:
												yield content
								except json.JSONDecodeError:
										continue

def generate_suggestions(messages, current_prompt):
	# Log input parameters
	logger.info(f"generate_suggestions called with:")
	logger.info(f"current_prompt: {current_prompt}")
	logger.info(f"messages: {json.dumps(messages, indent=2)}")

	headers = {
			"Authorization": f"Bearer {OPENROUTER_API_KEY}",
			"HTTP-Referer": "https://your-app-url.com",
			"X-Title": "OpenRouter Chatbot",
			"Content-Type": "application/json"
	}

	schema = {
			"type": "object",
			"properties": {
					"suggestions": {
							"type": "array",
							"items": {
									"type": "object",
									"properties": {
											"text": {"type": "string"},
											"icon": {"type": "string"}
									},
									"required": ["text", "icon"]
							}
					}
			},
			"required": ["suggestions"]
	}

	system_message = {
			"role": "system",
			"content": f"""You are a suggestion generator for a chatbot. The current context is:

			{current_prompt}

			Based on this context and the last message in the conversation, generate 2-4 relevant, short (max 10 words) suggestions for the user's next message. These suggestions should be direct responses to the last question or prompt from the assistant.

			Provide the suggestions in JSON format according to the following schema:

			{json.dumps(schema, indent=2)}

			Use 'fas fa-' prefix for FontAwesome icons in the 'icon' field."""
	}

	# Use the last two messages from the chat history
	last_messages = messages[-2:] if len(messages) >= 2 else messages

	full_messages = [system_message] + last_messages

	data = {
			"model": SUGGESTMODEL,
			"messages": full_messages,
			"max_tokens": 250
	}

	logger.info("Sending request to API")
	logger.debug(f"Request data: {json.dumps(data, indent=2)}")

	try:
			response = requests.post(API_URL, headers=headers, json=data)
			response.raise_for_status()

			response_json = response.json()
			logger.debug(f"API Response: {json.dumps(response_json, indent=2)}")

			if 'choices' not in response_json:
					logger.error(f"Unexpected API response structure. Response: {json.dumps(response_json, indent=2)}")
					return []

			content = response_json['choices'][0]['message']['content']
			logger.info(f"Content from API: {content}")

			try:
					suggestions_data = json.loads(content)
					if isinstance(suggestions_data, dict) and 'suggestions' in suggestions_data:
							suggestions = suggestions_data['suggestions']
					elif isinstance(suggestions_data, list):
							suggestions = suggestions_data
					else:
							logger.warning(f"Unexpected content structure. Content: {content}")
							return []

					logger.info(f"Parsed suggestions: {json.dumps(suggestions, indent=2)}")
					return suggestions
			except json.JSONDecodeError:
					logger.warning(f"Failed to parse suggestions as JSON. Content: {content}")
					return []

	except requests.RequestException as e:
			logger.error(f"Error making request to API: {str(e)}")
			return []

	except (KeyError, IndexError, TypeError) as e:
			logger.error(f"Error parsing API response: {str(e)}")
			logger.error(f"Response JSON: {json.dumps(response_json, indent=2)}")
			return []

# Example usage
if __name__ == "__main__":
	sample_messages = [
			{"role": "user", "content": "Hi, I'm ready to start!"},
			{"role": "assistant", "content": "Great! What would you like to learn about today?"}
	]
	sample_prompt = "You are a helpful assistant for a learning platform."

	logger.info("Generating suggestions...")
	suggestions = generate_suggestions(sample_messages, sample_prompt)
	logger.info(f"Final suggestions: {json.dumps(suggestions, indent=2)}")
## main.py

import os
import logging
import json
import time
from flask import Flask, render_template, request, jsonify, Response, stream_with_context

from llm_chat import generate_response, generate_suggestions

# Set up Python's logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s', filename='log.txt', filemode='a')

app = Flask(__name__)

conversation_history = []
current_prompt = ""
current_mode = ""

def load_menu_config():
    with open('menu_config.json', 'r') as f:
        return json.load(f)

menu_config = load_menu_config()

def log_event(event_type, data):
    log_entry = f"{time.time()} - {event_type} - {json.dumps(data)}\n"
    with open('log.txt', 'a') as f:
        f.write(log_entry)
    logging.info(f"Event: {event_type}, Data: {json.dumps(data, indent=2)}")

@app.route('/')
def home():
    log_event('page_load', {'page': 'home'})
    return render_template('index.html', menu_config=menu_config)

@app.route('/chat')
def chat():
    prompt = request.args.get('prompt', '')
    avatar = request.args.get('avatar', 'default-avatar.svg')
    log_event('chat_page_load', {'prompt': prompt, 'avatar': avatar})
    return render_template('chat.html', prompt=prompt, avatar=avatar)

@app.route('/chat', methods=['POST'])
def chat_message():
    global conversation_history
    user_message = request.json['message']
    conversation_history.append({"role": "user", "content": user_message})

    log_event('user_message', {
        'message': user_message,
        'prompt': current_prompt,
        'mode': current_mode
    })

    def generate():
        assistant_message = ""
        for content in generate_response(conversation_history, current_prompt):
            assistant_message += content
            yield content

        conversation_history.append({"role": "assistant", "content": assistant_message})

        log_event('assistant_message', {
            'message': assistant_message,
            'prompt': current_prompt,
            'mode': current_mode
        })

    return Response(stream_with_context(generate()), content_type='text/plain')

@app.route('/suggestions', methods=['GET'])
def get_suggestions():
    global conversation_history
    suggestions_data = generate_suggestions(conversation_history, current_prompt)

    # Check if suggestions_data is a dictionary with a 'suggestions' key
    if isinstance(suggestions_data, dict) and 'suggestions' in suggestions_data:
        suggestions = suggestions_data['suggestions']
    else:
        suggestions = suggestions_data  # Assume it's already the correct format

    log_event('suggestions_generated', {
        'suggestions': suggestions,
        'conversation_history': conversation_history
    })
    logging.info(f"Generated suggestions: {json.dumps(suggestions, indent=2)}")
    return jsonify(suggestions)

@app.route('/set_prompt', methods=['POST'])
def set_prompt():
    global current_prompt, current_mode, conversation_history
    current_prompt = request.json['prompt']
    current_mode = request.json.get('mode', '')
    conversation_history = []  # Reset conversation history when changing prompts
    log_event('prompt_set', {
        'prompt': current_prompt,
        'mode': current_mode
    })
    return jsonify({"status": "success"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
