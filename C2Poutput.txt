You are Tom, the worlds greatest software engineer.

This is my website chat program being developed in replit IDE based on flask

It has multi-user chatting with a LLM

If recommending changes to a specifc file then please give the full file contents and not just the changes, there is no need to also describe the changes unless there is a problem I need to be aware of. 

Don't be lazy, give the full file for each changing file and don't expect me to merge on and new files.
-----
suggest three methods of logging the menu selections and chat messaging that allows easy future usuage analysis, then i will select one and then please code the changes
## templates/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Christian Children's Education Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js"></script>
    <style>
        body, html {
            height: 100%;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }
        .container {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            background: linear-gradient(to bottom, #4a4a7d, #5a5a8a);
        }
        .menu-container {
            background-color: #3c3c6e;
            color: white;
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
        }
        .menu-item, .submenu-item {
            cursor: pointer;
            padding: 10px 20px;
            margin: 10px 0;
            background-color: #5a5a8a;
            border-radius: 5px;
            transition: background-color 0.3s;
            text-align: center;
            width: 200px;
        }
        .menu-item:hover, .submenu-item:hover {
            background-color: #6b6ba8;
        }
        .submenu {
            display: none;
        }
        .chat-container {
            display: none;
            flex-direction: column;
            height: 100%;
        }
        .chat-header {
            background-color: #3c3c6e;
            color: white;
            padding: 10px;
            display: flex;
            align-items: center;
        }
        .profile-pic {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #5a5a8a;
            margin-right: 10px;
        }
        .chat-title {
            flex-grow: 1;
        }
        .header-icons span {
            margin-left: 15px;
            cursor: pointer;
        }
        .messages-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 5px;
        }
        .message {
            max-width: 80%;
            margin-bottom: 2px;
            clear: both;
        }
        .message-content {
            padding: 4px 8px;
            border-radius: 18px;
            display: inline-block;
            word-wrap: break-word;
            max-width: 100%;
        }
        .message-content p {
            margin: 0;
        }
        .message-content img.emoji {
            height: 1.2em;
            width: 1.2em;
            margin: 0 .05em 0 .1em;
            vertical-align: -0.1em;
        }
        .user-message {
            float: right;
        }
        .user-message .message-content {
            background-color: #dcf8c6;
        }
        .assistant-message {
            float: left;
        }
        .assistant-message .message-content {
            background-color: #ffffff;
        }
        .timestamp {
            font-size: 0.7em;
            color: #a0a0a0;
            margin-top: 1px;
            clear: both;
        }
        .input-area {
            background-color: #3c3c6e;
            padding: 10px;
            display: flex;
            align-items: center;
        }
        #user-input {
            flex-grow: 1;
            border: none;
            border-radius: 20px;
            padding: 10px 15px;
            margin-right: 10px;
            background-color: #5a5a8a;
            color: white;
        }
        #send-button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 1.2em;
        }
        .suggestions-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-end;
            margin-top: 5px;
            margin-bottom: 5px;
            padding: 0 10px;
        }
        .suggestion-button {
            background-color: #c6f8ee;
            color: #000;
            border: none;
            border-radius: 15px;
            padding: 5px 10px;
            margin: 2px;
            cursor: pointer;
            font-size: 0.8em;
            text-align: left;
            transition: opacity 0.3s, transform 0.3s;
        }
        .suggestion-button.fading {
            opacity: 0;
        }
        .suggestion-button.flying {
            transform: translateX(-100vw);
        }
        .back-button {
            background: none;
            border: none;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            margin-right: 10px;
        }
        .menu-header {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            width: 100%;
        }
        .menu-title {
            font-size: 1.2em;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="menu-container" id="menu-container">
            <div class="menu-header">
                <button id="menu-back-button" class="back-button" style="display: none;">‚Üê</button>
                <div class="menu-title" id="menu-title"></div>
            </div>
            <div id="menu-items"></div>
        </div>
        <div class="chat-container" id="chat-container">
            <div class="chat-header">
                <button id="chat-back-button" class="back-button">‚Üê</button>
                <div class="profile-pic"></div>
                <div class="chat-title">Christian Children's Education Chat</div>
                <div class="header-icons">
                    <span>üìû</span>
                    <span>üìπ</span>
                    <span>‚ãÆ</span>
                </div>
            </div>
            <div id="messages-container" class="messages-container"></div>
            <div id="suggestions-container" class="suggestions-container"></div>
            <div class="input-area">
                <input type="text" id="user-input" placeholder="Type your message...">
                <button id="send-button">‚û§</button>
            </div>
        </div>
    </div>

    <script>
        const md = window.markdownit();
        const menuContainer = document.getElementById('menu-container');
        const menuItems = document.getElementById('menu-items');
        const menuTitle = document.getElementById('menu-title');
        const menuBackButton = document.getElementById('menu-back-button');
        const chatContainer = document.getElementById('chat-container');
        const messagesContainer = document.getElementById('messages-container');
        const suggestionsContainer = document.getElementById('suggestions-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const chatBackButton = document.getElementById('chat-back-button');

        const emoticons = {
            ':)': 'üòä', ':(': 'üò¢', ':D': 'üòÉ', ';)': 'üòâ', ':P': 'üòõ',
            ':|': 'üòê', ':\'(': 'üò≠', ':O': 'üòÆ', '<3': '‚ù§Ô∏è', '>:(': 'üò†'
        };

        let currentMenu = 'main'; // 'main', 'sub', or 'chat'
        let menuConfig;
        let currentSubmenu;

        function replaceEmoticons(text) {
            return text.replace(/:\)|:\(|:D|;\)|:P|:\||:'\(|:O|<3|>:\(/g, match => emoticons[match] || match);
        }

        function renderContent(content) {
            const emoticonReplaced = replaceEmoticons(content);
            return md.render(emoticonReplaced);
        }

        function addMessage(role, content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}-message`;
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.innerHTML = renderContent(content);
            messageDiv.appendChild(contentDiv);
            
            const timestamp = document.createElement('div');
            timestamp.className = 'timestamp';
            timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            messageDiv.appendChild(timestamp);

            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            return contentDiv;
        }

        function createSuggestionButton(suggestion) {
            const button = document.createElement('button');
            button.textContent = suggestion;
            button.className = 'suggestion-button';
            button.addEventListener('click', () => {
                const buttons = suggestionsContainer.querySelectorAll('.suggestion-button');
                
                buttons.forEach((btn) => {
                    if (btn !== button) {
                        btn.classList.add('fading');
                    } else {
                        btn.classList.add('flying');
                    }
                });

                setTimeout(() => {
                    userInput.value = suggestion;
                    sendMessage();
                    removeSuggestions();
                }, 300);
            });
            return button;
        }

        function removeSuggestions() {
            suggestionsContainer.innerHTML = '';
        }

        function updateSuggestions() {
            fetch('/suggestions')
                .then(response => response.json())
                .then(suggestions => {
                    removeSuggestions();
                    suggestions.forEach(suggestion => {
                        suggestionsContainer.appendChild(createSuggestionButton(suggestion));
                    });
                });
        }

        function sendMessage() {
            const message = userInput.value.trim();
            if (message) {
                addMessage('user', message);
                userInput.value = '';
                removeSuggestions();

                fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message }),
                })
                .then(response => {
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let assistantMessage = '';
                    let messageElement = null;

                    function readStream() {
                        reader.read().then(({ done, value }) => {
                            if (done) {
                                updateSuggestions();
                                return;
                            }
                            const chunk = decoder.decode(value);
                            assistantMessage += chunk;
                            if (!messageElement) {
                                messageElement = addMessage('assistant', '');
                            }
                            messageElement.innerHTML = renderContent(assistantMessage);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            readStream();
                        });
                    }

                    readStream();
                });
            }
        }

        function showMainMenu() {
            menuContainer.style.display = 'flex';
            chatContainer.style.display = 'none';
            currentMenu = 'main';
            menuBackButton.style.display = 'none';
            menuTitle.textContent = 'Main Menu';
            createMenu(menuConfig);
        }

        function showSubMenu(submenu, title) {
            menuContainer.style.display = 'flex';
            chatContainer.style.display = 'none';
            currentMenu = 'sub';
            menuBackButton.style.display = 'block';
            menuTitle.textContent = title;
            createSubmenu(submenu);
        }

        function showChat() {
            menuContainer.style.display = 'none';
            chatContainer.style.display = 'flex';
            currentMenu = 'chat';
        }

        function createMenu(menuConfig) {
            menuItems.innerHTML = '';
            menuConfig.menu.forEach(item => {
                const menuItem = document.createElement('div');
                menuItem.className = 'menu-item';
                menuItem.textContent = item.name;
                menuItems.appendChild(menuItem);

                menuItem.addEventListener('click', () => {
                    currentSubmenu = item.submenu;
                    showSubMenu(item.submenu, item.name);
                });
            });
        }

        function createSubmenu(submenu) {
            menuItems.innerHTML = '';
            submenu.forEach(subItem => {
                const submenuItem = document.createElement('div');
                submenuItem.className = 'submenu-item';
                submenuItem.textContent = subItem.name;
                submenuItem.addEventListener('click', () => {
                    fetch('/set_prompt', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ prompt: subItem.prompt }),
                    })
                    .then(() => {
                        showChat();
                        addMessage('assistant', `Welcome to ${subItem.name}! How can I help you?`);
                    });
                });
                menuItems.appendChild(submenuItem);
            });
        }

        function initializeMenu(config) {
            menuConfig = config;
            showMainMenu();
        }

        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        menuBackButton.addEventListener('click', () => {
            if (currentMenu === 'sub') {
                showMainMenu();
            }
        });

        chatBackButton.addEventListener('click', () => {
            if (currentMenu === 'chat') {
                showSubMenu(currentSubmenu, menuTitle.textContent);
            }
        });

        // Initialize the menu
        initializeMenu({{ menu_config | tojson | safe }});
    </script>
</body>
</html>
## menu_config.json

{
	"menu": [
		{
			"name": "Bible Stories",
			"submenu": [
				{"name": "Old Testament", "prompt": "You are a friendly assistant helping children learn about Old Testament stories. Explain concepts in simple terms and use analogies that children can understand."},
				{"name": "New Testament", "prompt": "You are a friendly assistant helping children learn about New Testament stories. Focus on Jesus' teachings and parables, explaining them in a way that's easy for children to grasp."}
			]
		},
		{
			"name": "Christian Values",
			"submenu": [
				{"name": "Kindness", "prompt": "You are a friendly assistant teaching children about kindness from a Christian perspective. Use simple examples and encourage children to practice kindness in their daily lives."},
				{"name": "Forgiveness", "prompt": "You are a friendly assistant teaching children about forgiveness from a Christian perspective. Use relatable scenarios and explain the importance of forgiveness in Christianity."}
			]
		},
		{
			"name": "Prayer",
			"submenu": [
				{"name": "Learn to Pray", "prompt": "You are a friendly assistant teaching children how to pray. Explain the basics of prayer in simple terms and provide easy prayer examples for children to follow."},
				{"name": "Prayer Topics", "prompt": "You are a friendly assistant suggesting prayer topics for children. Offer age-appropriate prayer ideas and explain why we pray for different things."}
			]
		},
		{
			"name": "Fun Activities",
			"submenu": [
				{"name": "Bible Trivia", "prompt": "You are a friendly assistant offering Bible trivia questions for children. Ask age-appropriate questions about Bible stories and characters, and provide encouraging feedback."},
				{"name": "Christian Crafts", "prompt": "You are a friendly assistant suggesting Christian-themed craft ideas for children. Offer simple, fun craft projects that reinforce Christian teachings and values."}
			]
		}
	]
}
## main.py

import os
from flask import Flask, render_template, request, jsonify, Response, stream_with_context
import requests
import json

app = Flask(__name__)

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "openai/gpt-4"

conversation_history = []
current_prompt = ""

def load_menu_config():
    with open('menu_config.json', 'r') as f:
        return json.load(f)

menu_config = load_menu_config()

def generate_response(messages):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-app-url.com",
        "X-Title": "OpenRouter Chatbot",
        "Content-Type": "application/json"
    }

    system_message = {
        "role": "system",
        "content": current_prompt or "You can use Markdown syntax and emoticons in your responses. Common emoticons like :), :(, :D will be automatically converted to emojis."
    }

    messages = [system_message] + messages

    data = {
        "model": MODEL,
        "messages": messages,
        "stream": True
    }

    response = requests.post(API_URL, headers=headers, json=data, stream=True)

    for line in response.iter_lines():
        if line:
            line = line.decode('utf-8')
            if line.startswith('data: '):
                line = line[6:]
                if line.strip() == '[DONE]':
                    break
                try:
                    json_object = json.loads(line)
                    content = json_object['choices'][0]['delta'].get('content', '')
                    if content:
                        yield content
                except json.JSONDecodeError:
                    continue

def generate_suggestions(messages):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-app-url.com",
        "X-Title": "OpenRouter Chatbot",
        "Content-Type": "application/json"
    }

    prompt = messages + [{"role": "system", "content": "Generate 4 short, diverse suggestions for the user's next message.  You can use Markdown syntax and emoticons."}]

    data = {
        "model": MODEL,
        "messages": prompt,
        "max_tokens": 150
    }

    response = requests.post(API_URL, headers=headers, json=data)
    suggestions = response.json()['choices'][0]['message']['content'].split('\n')
    return [s.strip() for s in suggestions if s.strip()][:4]

@app.route('/')
def home():
    return render_template('index.html', menu_config=menu_config)

@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json['message']
    conversation_history.append({"role": "user", "content": user_message})

    def generate():
        for content in generate_response(conversation_history):
            yield content

    return Response(stream_with_context(generate()), content_type='text/plain')

@app.route('/suggestions', methods=['GET'])
def get_suggestions():
    suggestions = generate_suggestions(conversation_history)
    return jsonify(suggestions)

@app.route('/set_prompt', methods=['POST'])
def set_prompt():
    global current_prompt
    current_prompt = request.json['prompt']
    return jsonify({"status": "success"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
